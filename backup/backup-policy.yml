# HnT Sensor API 백업 정책 설정
# 작성일: 2025-09-26
# 목적: 자동화된 백업 정책 및 재해 복구 계획 정의

# 백업 정책 설정
backup_policy:
  # 전체 시스템 백업
  full_backup:
    enabled: true
    schedule: "0 0 2 * * ?"  # 매일 새벽 2시
    retention_days: 30
    compression: true
    notification: true
    
  # 데이터베이스 백업
  database_backup:
    enabled: true
    schedule: "0 0 */6 * * ?"  # 6시간마다
    retention_days: 7
    compression: true
    notification: false
    
  # 파일 백업
  file_backup:
    enabled: true
    schedule: "0 0 1 * * ?"  # 매일 새벽 1시
    retention_days: 14
    compression: true
    notification: false

# 백업 대상 설정
backup_targets:
  # 데이터베이스
  database:
    host: "hntsolution.co.kr"
    port: 3306
    database: "hnt"
    username: "root"
    password: "HntRoot123!"
    tables:
      - "hnt_user"
      - "hnt_sensor_info"
      - "hnt_sensor_data"
      - "hnt_config"
      - "hnt_alarm"
    
  # 로그 파일
  logs:
    directory: "logs/"
    patterns:
      - "*.log"
      - "*.log.*"
    exclude:
      - "*.tmp"
      - "*.lock"
    
  # 설정 파일
  config:
    directory: "src/main/resources/"
    patterns:
      - "*.yml"
      - "*.yaml"
      - "*.properties"
      - "*.xml"
    
  # 애플리케이션 파일
  application:
    directory: "target/"
    patterns:
      - "*.war"
      - "*.jar"
      - "*.class"

# 알림 설정
notifications:
  # 이메일 알림
  email:
    enabled: true
    smtp:
      host: "smtp.gmail.com"
      port: 587
      username: "hnt@hntsolution.co.kr"
      password: "email_password"
    from: "hnt@hntsolution.co.kr"
    to: "admin@hntsolution.co.kr"
    subject_prefix: "[HnT Sensor API] "
    
  # Slack 알림
  slack:
    enabled: true
    webhook_url: "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
    channel: "#hnt-alerts"
    username: "HnT Backup Bot"
    
  # Discord 알림
  discord:
    enabled: false
    webhook_url: "https://discord.com/api/webhooks/YOUR/DISCORD/WEBHOOK"
    username: "HnT Backup Bot"

# 재해 복구 계획
disaster_recovery:
  # RTO (Recovery Time Objective) - 목표 복구 시간
  rto: "4 hours"
  
  # RPO (Recovery Point Objective) - 목표 복구 시점
  rpo: "1 hour"
  
  # 복구 우선순위
  recovery_priority:
    1: "데이터베이스 복구"
    2: "애플리케이션 복구"
    3: "로그 파일 복구"
    4: "설정 파일 복구"
  
  # 복구 절차
  recovery_procedures:
    step1:
      title: "시스템 상태 확인"
      description: "서버 상태, 네트워크 연결, 디스크 공간 확인"
      estimated_time: "30 minutes"
      
    step2:
      title: "데이터베이스 복구"
      description: "최신 데이터베이스 백업으로 복구"
      estimated_time: "1 hour"
      
    step3:
      title: "애플리케이션 복구"
      description: "WAR 파일 배포 및 애플리케이션 시작"
      estimated_time: "30 minutes"
      
    step4:
      title: "설정 파일 복구"
      description: "애플리케이션 설정 파일 복구"
      estimated_time: "15 minutes"
      
    step5:
      title: "서비스 검증"
      description: "애플리케이션 정상 동작 확인"
      estimated_time: "30 minutes"

# 백업 검증 설정
backup_validation:
  # 자동 검증
  auto_validate: true
  validation_schedule: "0 0 3 * * ?"  # 매일 새벽 3시
  
  # 검증 항목
  validation_checks:
    - "백업 파일 무결성 확인"
    - "데이터베이스 연결 테스트"
    - "애플리케이션 시작 테스트"
    - "API 엔드포인트 응답 확인"
  
  # 검증 실패 시 알림
  validation_failure_notification: true

# 백업 모니터링
backup_monitoring:
  # 백업 상태 모니터링
  status_check:
    enabled: true
    interval: "0 */30 * * * ?"  # 30분마다
    timeout: 300  # 5분
    
  # 백업 크기 모니터링
  size_monitoring:
    enabled: true
    warning_threshold: "10GB"
    critical_threshold: "20GB"
    
  # 백업 성공률 모니터링
  success_rate_monitoring:
    enabled: true
    warning_threshold: 90  # 90% 미만 시 경고
    critical_threshold: 80  # 80% 미만 시 위험

# 백업 저장소 설정
backup_storage:
  # 로컬 저장소
  local:
    enabled: true
    directory: "/backup"
    max_size: "100GB"
    
  # 원격 저장소 (선택적)
  remote:
    enabled: false
    type: "s3"  # s3, ftp, scp
    endpoint: "https://s3.amazonaws.com"
    bucket: "hnt-backup"
    access_key: "YOUR_ACCESS_KEY"
    secret_key: "YOUR_SECRET_KEY"
    
  # 암호화 설정
  encryption:
    enabled: true
    algorithm: "AES-256"
    key_file: "/etc/hnt/backup.key"

# 백업 성능 최적화
backup_optimization:
  # 병렬 백업
  parallel_backup: true
  max_threads: 4
  
  # 압축 설정
  compression:
    algorithm: "gzip"
    level: 6  # 1-9 (6이 속도와 압축률의 균형)
    
  # 증분 백업
  incremental_backup: false
  incremental_schedule: "0 0 4 * * ?"  # 매일 새벽 4시

# 백업 로깅
backup_logging:
  # 로그 레벨
  log_level: "INFO"
  
  # 로그 파일
  log_file: "logs/backup.log"
  
  # 로그 로테이션
  log_rotation:
    max_size: "100MB"
    max_files: 10
    max_days: 30

# 백업 테스트
backup_testing:
  # 정기 테스트
  regular_testing:
    enabled: true
    schedule: "0 0 5 * * SUN"  # 매주 일요일 새벽 5시
    test_type: "restore_test"
    
  # 테스트 환경
  test_environment:
    database: "hnt_test"
    application_port: 8081
    
  # 테스트 결과 알림
  test_notification: true

# 백업 정책 위반 처리
policy_violations:
  # 백업 실패 처리
  backup_failure:
    retry_attempts: 3
    retry_interval: "1 hour"
    escalation_time: "24 hours"
    
  # 저장소 부족 처리
  storage_shortage:
    cleanup_old_backups: true
    emergency_cleanup: true
    notification: true
    
  # 백업 검증 실패 처리
  validation_failure:
    quarantine_backup: true
    regenerate_backup: true
    notification: true
