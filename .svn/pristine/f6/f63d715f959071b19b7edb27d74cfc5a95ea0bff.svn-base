package com.andrew.hnt.api.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.util.HashMap;
import java.util.Map;

/**
 * 세션 디버깅을 위한 컨트롤러
 * 앱과 웹 간의 세션 공유 문제 해결을 위한 디버깅 정보 제공
 */
@Controller
@RequestMapping("/debug")
public class SessionDebugController extends DefaultController {
    
    private Logger logger = LoggerFactory.getLogger(this.getClass());
    
    /**
     * 세션 상태 확인 페이지
     */
    @RequestMapping(value = "/session", method = RequestMethod.GET)
    public String sessionDebug(
            HttpServletRequest req,
            HttpServletResponse res,
            @RequestParam(name = "userId", required = false) String userId,
            Model model) {
        
        HttpSession session = req.getSession();
        
        // 세션 정보 수집
        Map<String, Object> sessionInfo = new HashMap<>();
        sessionInfo.put("sessionId", session.getId());
        sessionInfo.put("creationTime", session.getCreationTime());
        sessionInfo.put("lastAccessedTime", session.getLastAccessedTime());
        sessionInfo.put("maxInactiveInterval", session.getMaxInactiveInterval());
        
        // 세션 속성들
        sessionInfo.put("userId", session.getAttribute("userId"));
        sessionInfo.put("loginUserId", session.getAttribute("loginUserId"));
        sessionInfo.put("userNm", session.getAttribute("userNm"));
        sessionInfo.put("userGrade", session.getAttribute("userGrade"));
        sessionInfo.put("userEmail", session.getAttribute("userEmail"));
        sessionInfo.put("userTel", session.getAttribute("userTel"));
        sessionInfo.put("token", session.getAttribute("token"));
        
        // 요청 정보
        Map<String, Object> requestInfo = new HashMap<>();
        requestInfo.put("remoteAddr", req.getRemoteAddr());
        requestInfo.put("userAgent", req.getHeader("User-Agent"));
        requestInfo.put("referer", req.getHeader("Referer"));
        requestInfo.put("urlParamUserId", userId);
        
        // 쿠키 정보
        Map<String, Object> cookieInfo = new HashMap<>();
        if (req.getCookies() != null) {
            for (javax.servlet.http.Cookie cookie : req.getCookies()) {
                cookieInfo.put(cookie.getName(), cookie.getValue());
            }
        }
        
        model.addAttribute("sessionInfo", sessionInfo);
        model.addAttribute("requestInfo", requestInfo);
        model.addAttribute("cookieInfo", cookieInfo);
        
        logger.info("=== 세션 디버깅 정보 ===");
        logger.info("세션 ID: {}", session.getId());
        logger.info("세션 속성: {}", sessionInfo);
        logger.info("요청 정보: {}", requestInfo);
        logger.info("쿠키 정보: {}", cookieInfo);
        
        return "debug/session";
    }
    
    /**
     * 세션 강제 설정 API (앱 연동용)
     */
    @RequestMapping(value = "/setSession", method = RequestMethod.POST)
    @ResponseBody
    public Map<String, Object> setSession(
            HttpServletRequest req,
            @RequestParam(name = "userId", required = true) String userId,
            @RequestParam(name = "userNm", required = false) String userNm,
            @RequestParam(name = "userGrade", required = false) String userGrade) {
        
        Map<String, Object> resultMap = new HashMap<>();
        HttpSession session = req.getSession();
        
        try {
            logger.info("=== 세션 강제 설정 시작 ===");
            logger.info("요청 userId: {}, userNm: {}, userGrade: {}", userId, userNm, userGrade);
            
            // 세션에 사용자 정보 설정
            session.setAttribute("userId", userId);
            session.setAttribute("loginUserId", userId);
            if (userNm != null && !userNm.isEmpty()) {
                session.setAttribute("userNm", userNm);
            }
            if (userGrade != null && !userGrade.isEmpty()) {
                session.setAttribute("userGrade", userGrade);
            }
            
            // 세션 설정 확인
            logger.info("세션 설정 완료:");
            logger.info("  - userId: {}", session.getAttribute("userId"));
            logger.info("  - loginUserId: {}", session.getAttribute("loginUserId"));
            logger.info("  - userNm: {}", session.getAttribute("userNm"));
            logger.info("  - userGrade: {}", session.getAttribute("userGrade"));
            
            resultMap.put("resultCode", "200");
            resultMap.put("resultMessage", "세션 설정 성공");
            resultMap.put("sessionId", session.getId());
            
        } catch (Exception e) {
            logger.error("세션 설정 중 오류 발생: {}", e.getMessage());
            resultMap.put("resultCode", "999");
            resultMap.put("resultMessage", "세션 설정 실패: " + e.getMessage());
        }
        
        return resultMap;
    }
    
    /**
     * 세션 상태 확인 API
     */
    @RequestMapping(value = "/getSession", method = RequestMethod.GET)
    @ResponseBody
    public Map<String, Object> getSession(HttpServletRequest req) {
        Map<String, Object> resultMap = new HashMap<>();
        HttpSession session = req.getSession();
        
        try {
            Map<String, Object> sessionData = new HashMap<>();
            sessionData.put("sessionId", session.getId());
            sessionData.put("userId", session.getAttribute("userId"));
            sessionData.put("loginUserId", session.getAttribute("loginUserId"));
            sessionData.put("userNm", session.getAttribute("userNm"));
            sessionData.put("userGrade", session.getAttribute("userGrade"));
            sessionData.put("userEmail", session.getAttribute("userEmail"));
            sessionData.put("userTel", session.getAttribute("userTel"));
            sessionData.put("token", session.getAttribute("token"));
            
            resultMap.put("resultCode", "200");
            resultMap.put("resultMessage", "세션 정보 조회 성공");
            resultMap.put("sessionData", sessionData);
            
        } catch (Exception e) {
            logger.error("세션 정보 조회 중 오류 발생: {}", e.getMessage());
            resultMap.put("resultCode", "999");
            resultMap.put("resultMessage", "세션 정보 조회 실패: " + e.getMessage());
        }
        
        return resultMap;
    }
}
