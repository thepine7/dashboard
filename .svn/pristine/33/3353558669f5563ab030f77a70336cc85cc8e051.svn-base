package com.andrew.hnt.api.service.impl;

import com.andrew.hnt.api.mapper.MqttMapper;
import com.andrew.hnt.api.model.SensorVO;
import com.andrew.hnt.api.service.MqttService;
import com.andrew.hnt.api.service.DeviceRegistrationService;

import com.fasterxml.jackson.databind.ObjectMapper;
import okhttp3.*;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import java.util.concurrent.locks.ReentrantLock;

@Service
@Transactional(timeout = 10)
public class MqttServiceImpl implements MqttService {

    @Autowired
    private MqttMapper mqttMapper;

    	@Autowired
	private LoginServiceImpl loginService;

	@Autowired
	private DeviceRegistrationService deviceRegistrationService;

    private Logger logger = LoggerFactory.getLogger(this.getClass());

    public SensorVO sensorVO1 = new SensorVO();
    public static ArrayList<String> data = new ArrayList<String>();
    public static String title = "";
    public static String name = "";
    public static String type = "";
    public static String dinVal = "";
    public static String outputVal = "";
    public static String sensorId = "";
    public static String sensorUuid = "";
    public static String sensorType = "";
    public static SensorVO sensorVO = new SensorVO();

    private String apiKey = "AAAAoUCvVY0:APA91bFhv_a-RRU0OOJPmGk4MBri_Aqu0MW4r1CDfar4GrhQf3H9XPTWRhoul86dfhLTomTn-WsTrKJ-qPAakoap9vMl7JHmrj8WniVnTQE3y5mhxKFDPp09bAmjaAuDx8qUXH1qhO05";
    private String senderId = "692574967181";

    private ReentrantLock listLock = new ReentrantLock();

    public String setSensorValue(ArrayList<String> data, SensorVO sensorVO) throws Exception {
        this.data = data;
        this.title = sensorVO.getUserId();
        this.name = sensorVO.getName();
        this.type = sensorVO.getType();
        this.dinVal = sensorVO.getDinVal();
        this.outputVal = sensorVO.getOutputVal();
        this.sensorId = sensorVO.getSensorId();
        this.sensorUuid = sensorVO.getUuid();
        this.sensorType = sensorVO.getSensorType();
        this.sensorVO = sensorVO;

        Iterator<String> itrData = data.iterator();
        while(null != data && itrData.hasNext()) {
            listLock.lock();
            try {
                return data.toString();
            } finally {
                listLock.unlock();
            }
        }

        return null;
    }

    @Override
    public Map<String, Object> getData() throws Exception {
        Map<String, Object> resultMap = new HashMap<String, Object>();

        resultMap.put("data", data.toString());
        resultMap.put("title", title);
        resultMap.put("sensorId", sensorId);
        resultMap.put("sensorUuid", sensorUuid);
        resultMap.put("sensorType", sensorType);
        resultMap.put("sensorVO", sensorVO);
        resultMap.put("name", name);
        resultMap.put("type", type);
        resultMap.put("dinVal", dinVal);
        resultMap.put("outputVal", outputVal);

        return resultMap;
    }

    @Override
    public void receiveData(String str) {
        SensorVO sensorVO = new SensorVO();
        sensorVO.setInstId("hnt");
        sensorVO.setMdfId("hnt");
        
        if(null != str && !"".equals(str) && 0 < str.length()) {
            // MqttApplicationRunner와 동일한 방식으로 MQTT 메시지 직접 처리
            try {
                ObjectMapper mapper = new ObjectMapper();
                
                // JSON 데이터인지 확인
                if(str.startsWith("{")) {
                    // JSON 데이터인 경우
                    if(isValidJson(str)) {
                        Map<String, Object> valueMap = mapper.readValue(str, Map.class);
                        
                        if(null != valueMap && 0 < valueMap.size()) {
                        	if(valueMap.containsKey("actcode")) {
                        		if("setres".equals(valueMap.get("actcode"))) {
                        			// 설정 응답 데이터 처리
                        			sensorVO.setDataJson(str);
                        		} else if("live".equals(valueMap.get("actcode"))) {
                                    // 실시간 센서 데이터 처리
                                    if(null != valueMap.get("value") && !"".equals(valueMap.get("value"))) {
                                        if(!"null".equals(String.valueOf(valueMap.get("value")))) {
                                            sensorVO.setSensorValue(String.valueOf(valueMap.get("value")));
                                        } else {
                                            sensorVO.setSensorValue("0");
                                        }
                                    }

                                    sensorVO.setName(String.valueOf(valueMap.get("name")));
                                    sensorVO.setType(String.valueOf(valueMap.get("type")));

                        		} else if("din".equals(valueMap.get("name"))) {
                        		    // 디지털 입력 상태 처리
                        		    if("1".equals(String.valueOf(valueMap.get("type")))) {
                                        sensorVO.setDinVal(String.valueOf(valueMap.get("value")));
                                    }
                                } else if("output".equals(valueMap.get("name"))) {
                        		    // 출력 상태 처리
                        		    if("1".equals(String.valueOf(valueMap.get("type")))) {
                        		        // COMP 설정
                                        sensorVO.setOutputVal("comp/" + String.valueOf(valueMap.get("value")));
                                    } else if("2".equals(String.valueOf(valueMap.get("type")))) {
                        		        // DEF 설정
                                        sensorVO.setOutputVal("def/" + String.valueOf(valueMap.get("value")));
                                    } else if("3".equals(String.valueOf(valueMap.get("type")))) {
                        		        // FAN 설정
                                        sensorVO.setOutputVal("fan/" + String.valueOf(valueMap.get("value")));
                                    }
                                }
                        	}
                        }
                    }
                } else {
                    // 토픽인 경우 (센서 데이터 처리)
                    sensorVO.setTopic(str);
                    
                                         // register 토픽 처리 (MqttApplicationRunner에서 이미 처리됨)
                     if(str.contains("register")) {
                         logger.info("=== MqttServiceImpl에서 register 토픽 처리 완료: {} ===", str);
                         
                         // MqttApplicationRunner에서 이미 즉시 응답과 장치 등록을 처리했으므로
                         // 여기서는 추가 처리하지 않음
                         
                         // register 토픽은 센서 데이터로 처리하지 않음
                         return;
                     }
                    
                    // 일반 토픽인 경우 (센서 데이터 처리)
                    String[] topicArr = str.split("/");
                    if(null != topicArr && topicArr.length > 3) {
                        sensorVO.setUserId(topicArr[1]);      // 사용자 ID
                        sensorVO.setSensorId(topicArr[1]);    // 센서 ID
                        sensorVO.setUuid(topicArr[3]);        // UUID
                        if(topicArr.length > 2) {
                            sensorVO.setSensorType(topicArr[2]); // 센서 타입
                        }
                    }
                }


                
                // 센서 데이터가 있으면 저장
                if(null != sensorVO.getSensorValue() && !"".equals(sensorVO.getSensorValue())) {
                    listLock.lock();
                    try {
                        data = new ArrayList<>();
                        data.add(sensorVO.getSensorValue());
                        this.setSensorValue(data, sensorVO);
                        if (loginService != null) {
                            loginService.setData(sensorVO);
                        }
                    } finally {
                        listLock.unlock();
                    }
                }

            } catch(Exception e) {
                e.printStackTrace();
                logger.error("Error : " + e.toString());
            }
        }
    }
    
    public boolean isValidJson(String str) {
    	boolean result = false;
    	
    	ObjectMapper mapper = new ObjectMapper();
    	
    	try {
    		mapper.readTree(str);
    		result = true;
    	} catch(Exception e) {
    		result = false;
    	}
    	
    	return result;
    }
    
    @Override
    public void insertSensorData(SensorVO sensorVO) throws Exception {
    	if(null != sensorVO) {
    		try {
    			mqttMapper.insertSensorData(sensorVO);
    		} catch(Exception e) {
    			logger.error("Error : " + e.toString());
    		}
    	}
    }



	public void sendNoti(Map<String, Object> noti) {
        if(null != noti && 0 < noti.size()) {
            OkHttpClient client = new OkHttpClient.Builder().build();

            okhttp3.RequestBody body = new FormBody.Builder()
                    .add("to", String.valueOf(noti.get("token")))
                    .add("project_id", senderId)
                    .add("notification", "")
                    .add("data", String.valueOf(noti.get("sensor_uuid")) + "장치 이상 발생 : " + String.valueOf(noti.get("type")))
                    .build();

            Request request = new Request.Builder()
                    .url("https://fcm.googleapis.com/fcm/send")
                    .addHeader("Authorization", "key=" + apiKey)
                    .post(body)
                    .build();

            client.newCall(request).enqueue(new Callback() {
                @Override
                public void onFailure(@NotNull Call call, @NotNull IOException e) {
                    logger.error("Error");
                }

                @Override
                public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                    if (response.isSuccessful()) {
                        logger.info("Success : " + response.code() + "/" + response.body().string());
                    } else {
                        logger.info("Fail : " + response.code() + "/" + response.body().string());
                    }
                }
            });
        }
    }

}


