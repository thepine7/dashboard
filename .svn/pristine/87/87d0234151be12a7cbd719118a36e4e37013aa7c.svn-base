package com.andrew.hnt.api.service;

import com.andrew.hnt.api.util.StringUtil;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.auth.oauth2.GoogleCredentials;
import okhttp3.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

/**
 * FCM v1 API 서비스 클래스
 * Legacy HTTP API에서 v1 API로 마이그레이션
 */
@Service
public class FCMService {
    
    private static final Logger logger = LoggerFactory.getLogger(FCMService.class);
    
    @Value("${security.fcm.api-key}")
    private String apiKey;
    
    @Value("${security.fcm.sender-id}")
    private String senderId;
    
    @Value("${security.fcm.project-id}")
    private String projectId;
    
    @Value("${security.fcm.service-account-key-path:}")
    private String serviceAccountKeyPath;
    
    private final OkHttpClient client;
    private final ObjectMapper objectMapper;
    
    public FCMService() {
        this.client = new OkHttpClient.Builder()
                .connectTimeout(30, TimeUnit.SECONDS)
                .readTimeout(30, TimeUnit.SECONDS)
                .writeTimeout(30, TimeUnit.SECONDS)
                .build();
        this.objectMapper = new ObjectMapper();
    }
    
    /**
     * Spring Bean 초기화 후 실행되는 메서드
     * @Value 값들이 주입된 후 실행됨
     */
    @PostConstruct
    public void init() {
        // 톰캣 서버 콘솔에 FCM 로그 명확하게 출력
        logger.info("===============================================");
        logger.info("🚀 FCM v1 API 서비스 초기화 완료");
        logger.info("===============================================");
        logger.info("📱 FCM v1 API 설정 정보:");
        logger.info("   - Project ID: {}", projectId);
        logger.info("   - Service Account Key: {}", serviceAccountKeyPath);
        logger.info("   - Legacy API Key: {}", apiKey != null ? "설정됨" : "설정되지 않음");
        logger.info("===============================================");
    }
    
    /**
     * FCM v1 API를 사용하여 알림 전송
     * @param token 디바이스 토큰
     * @param title 알림 제목
     * @param body 알림 내용
     * @param data 추가 데이터
     * @return 전송 성공 여부
     */
    public boolean sendNotification(String token, String title, String body, Map<String, String> data) {
        try {
            // 톰캣 서버에 FCM 전송 시작 로그 출력
            logger.info("===============================================");
            logger.info("🚀 FCM v1 API 전송 시작");
            logger.info("   - 디바이스 토큰: {}...", token.substring(0, Math.min(token.length(), 20)));
            logger.info("   - 알림 제목: {}", title);
            logger.info("   - 알림 내용: {}", body);
            logger.info("   - 추가 데이터: {}", data != null ? data.size() + "개" : "없음");
            logger.info("===============================================");
            
            // FCM v1 API 요청 본문 구성
            Map<String, Object> requestBody = new HashMap<>();
            Map<String, Object> message = new HashMap<>();
            
            message.put("token", token);
            
            // 알림 설정
            Map<String, String> notification = new HashMap<>();
            notification.put("title", title);
            notification.put("body", body);
            message.put("notification", notification);
            
            // 데이터 설정
            if (data != null && !data.isEmpty()) {
                message.put("data", data);
            }
            
            requestBody.put("message", message);
            
            // JSON 변환
            String jsonBody = objectMapper.writeValueAsString(requestBody);
            
            // 톰캣 서버에 요청 본문 로그 출력
            logger.info("===============================================");
            logger.info("📋 FCM v1 API 요청 본문 생성 완료");
            logger.info("   - 요청 URL: https://fcm.googleapis.com/v1/projects/{}/messages:send", projectId);
            logger.info("   - 요청 본문: {}", jsonBody);
            logger.info("===============================================");
            
            // HTTP 요청 생성
            RequestBody body1 = RequestBody.create(jsonBody, MediaType.parse("application/json"));
            
            Request request = new Request.Builder()
                    .url("https://fcm.googleapis.com/v1/projects/" + projectId + "/messages:send")
                    .addHeader("Authorization", "Bearer " + getAuthToken())
                    .addHeader("Content-Type", "application/json")
                    .post(body1)
                    .build();
            
            // 톰캣 서버에 HTTP 요청 전송 로그 출력
            logger.info("===============================================");
            logger.info("🌐 FCM v1 API HTTP 요청 전송");
            logger.info("   - 요청 헤더: Authorization: Bearer ***, Content-Type: application/json");
            logger.info("   - 요청 메서드: POST");
            logger.info("===============================================");
            
            // 요청 전송
            try (Response response = client.newCall(request).execute()) {
                if (response.isSuccessful()) {
                    String responseBody = response.body() != null ? response.body().string() : "";
                    logger.info("===============================================");
                    logger.info("✅ FCM v1 API 전송 성공!");
                    logger.info("   - 응답 코드: {}", response.code());
                    logger.info("   - 응답 내용: {}", responseBody);
                    logger.info("   - 토큰: {}...", token.substring(0, Math.min(token.length(), 20)));
                    logger.info("   - 제목: {}", title);
                    logger.info("   - 전송 시간: {}", java.time.LocalDateTime.now());
                    logger.info("===============================================");
                    return true;
                } else {
                    String responseBody = response.body() != null ? response.body().string() : "";
                    logger.error("===============================================");
                    logger.error("❌ FCM v1 API 전송 실패!");
                    logger.error("   - 응답 코드: {}", response.code());
                    logger.error("   - 응답 내용: {}", responseBody);
                    logger.error("   - 토큰: {}...", token.substring(0, Math.min(token.length(), 20)));
                    logger.error("   - 실패 시간: {}", java.time.LocalDateTime.now());
                    logger.error("===============================================");
                    return false;
                }
            }
            
        } catch (Exception e) {
            logger.error("===============================================");
            logger.error("💥 FCM v1 API 전송 중 예외 발생!");
            logger.error("   - 예외 타입: {}", e.getClass().getSimpleName());
            logger.error("   - 예외 메시지: {}", e.getMessage());
            logger.error("   - 발생 시간: {}", java.time.LocalDateTime.now());
            logger.error("   - 스택 트레이스:", e);
            logger.error("===============================================");
            return false;
        }
    }
    
    /**
     * 센서 알림 전송 (기존 sendNoti 메서드와 호환)
     * @param noti 알림 정보
     * @return 전송 성공 여부
     */
    public boolean sendSensorNotification(Map<String, Object> noti) {
        if (noti == null || noti.isEmpty()) {
            return false;
        }
        
        try {
            String token = String.valueOf(noti.get("token"));
            String sensorUuid = String.valueOf(noti.get("sensor_uuid"));
            String gu = String.valueOf(noti.get("gu"));
            String inTemp = String.valueOf(noti.get("inTemp"));
            String curTemp = String.valueOf(noti.get("curTemp"));
            String inType = String.valueOf(noti.get("inType"));
            
            // 톰캣 서버에 센서 알림 전송 로그 출력
            logger.info("===============================================");
            logger.info("📱 센서 알림 전송 시작");
            logger.info("   - 센서 UUID: {}", sensorUuid);
            logger.info("   - 알림 유형: {}", gu);
            logger.info("   - 설정 온도: {}°C", curTemp);
            logger.info("   - 현재 온도: {}°C", inTemp);
            logger.info("   - 입력 타입: {}", inType);
            logger.info("===============================================");
            
            // 알림 제목과 내용 생성
            String title = "센서 알림";
            String body = generateNotificationBody(gu, inTemp, curTemp, inType, sensorUuid);
            
            // 추가 데이터 설정
            Map<String, String> data = new HashMap<>();
            data.put("sensor_uuid", sensorUuid);
            data.put("type", gu);
            data.put("message", body);
            data.put("timestamp", String.valueOf(System.currentTimeMillis()));
            
            return sendNotification(token, title, body, data);
            
        } catch (Exception e) {
            logger.error("===============================================");
            logger.error("💥 센서 알림 전송 중 예외 발생!");
            logger.error("   - 예외 타입: {}", e.getClass().getSimpleName());
            logger.error("   - 예외 메시지: {}", e.getMessage());
            logger.error("   - 센서 UUID: {}", noti.get("sensor_uuid"));
            logger.error("   - 알림 유형: {}", noti.get("gu"));
            logger.error("   - 발생 시간: {}", java.time.LocalDateTime.now());
            logger.error("   - 스택 트레이스:", e);
            logger.error("===============================================");
            return false;
        }
    }
    
    /**
     * 알림 내용 생성
     */
    private String generateNotificationBody(String gu, String inTemp, String curTemp, String inType, String sensorUuid) {
        StringBuilder body = new StringBuilder();
        body.append(sensorUuid).append("장치 ");
        
        if ("ain".equals(gu)) {
            if ("high".equals(inType)) {
                body.append("온도 높음(설정온도: ").append(curTemp).append("°C, 현재온도: ").append(inTemp).append("°C)");
            } else if ("low".equals(inType)) {
                body.append("온도 낮음(설정온도: ").append(curTemp).append("°C, 현재온도: ").append(inTemp).append("°C)");
            }
        } else if ("din".equals(gu)) {
            body.append("DI알람(에러, 현재온도: ").append(inTemp).append("°C)");
        } else if ("netError".equals(gu)) {
            body.append("통신에러");
        } else {
            body.append("이상 발생");
        }
        
        return body.toString();
    }
    
    /**
     * OAuth 2.0 액세스 토큰 발급
     * @return 액세스 토큰 또는 null
     */
    private String getAccessToken() {
        try {
            if (StringUtil.isEmpty(serviceAccountKeyPath)) {
                logger.warn("===============================================");
                logger.warn("⚠️ 서비스 계정 키 경로가 설정되지 않음");
                logger.warn("   - 환경변수 FCM_SERVICE_ACCOUNT_KEY_PATH 확인 필요");
                logger.warn("===============================================");
                return null;
            }
            
            // 톰캣 서버에 OAuth 2.0 토큰 발급 시작 로그
            logger.info("===============================================");
            logger.info("🔑 OAuth 2.0 액세스 토큰 발급 시작");
            logger.info("   - 서비스 계정 키: {}", serviceAccountKeyPath);
            logger.info("===============================================");
            
            // GoogleCredentials 사용하여 토큰 발급
            InputStream inputStream;
            if (serviceAccountKeyPath.startsWith("classpath:")) {
                // classpath 리소스에서 읽기
                String resourcePath = serviceAccountKeyPath.substring("classpath:".length());
                inputStream = getClass().getClassLoader().getResourceAsStream(resourcePath);
                if (inputStream == null) {
                    throw new IOException("리소스를 찾을 수 없습니다: " + resourcePath);
                }
            } else {
                // 파일 시스템에서 읽기
                inputStream = new FileInputStream(serviceAccountKeyPath);
            }
            
            GoogleCredentials credentials = GoogleCredentials
                .fromStream(inputStream)
                .createScoped("https://www.googleapis.com/auth/firebase.messaging");
            
            credentials.refreshIfExpired();
            String token = credentials.getAccessToken().getTokenValue();
            
            logger.info("===============================================");
            logger.info("✅ OAuth 2.0 액세스 토큰 발급 성공!");
            logger.info("   - 토큰 길이: {} 자", token.length());
            logger.info("   - 토큰 시작: {}...", token.substring(0, Math.min(token.length(), 20)));
            logger.info("===============================================");
            return token;
            
        } catch (Exception e) {
            logger.error("===============================================");
            logger.error("❌ OAuth 2.0 액세스 토큰 발급 실패!");
            logger.error("   - 예외 타입: {}", e.getClass().getSimpleName());
            logger.error("   - 예외 메시지: {}", e.getMessage());
            logger.error("   - 서비스 계정 키 경로: {}", serviceAccountKeyPath);
            logger.error("   - 발생 시간: {}", java.time.LocalDateTime.now());
            logger.error("   - 스택 트레이스:", e);
            logger.error("===============================================");
            return null;
        }
    }
    
    /**
     * FCM v1 API 인증 토큰 가져오기
     * @return 인증 토큰
     */
    private String getAuthToken() {
        // OAuth 2.0 토큰 우선 시도
        String oauthToken = getAccessToken();
        if (oauthToken != null) {
            return oauthToken;
        }
        
        // Fallback: Legacy API 키 사용
        logger.warn("===============================================");
        logger.warn("🔄 FCM v1 API → Legacy API 전환");
        logger.warn("   - OAuth 2.0 토큰 발급 실패로 Legacy API 키 사용");
        logger.warn("   - API 키 길이: {} 자", apiKey != null ? apiKey.length() : 0);
        logger.warn("===============================================");
        return apiKey;
    }
}
