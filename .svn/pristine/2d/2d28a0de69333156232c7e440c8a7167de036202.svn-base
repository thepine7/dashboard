package com.andrew.hnt.api.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.andrew.hnt.api.model.DataVO;
import com.andrew.hnt.api.model.LoginVO;
import com.andrew.hnt.api.model.SensorVO;
import com.andrew.hnt.api.model.UserInfo;
import com.andrew.hnt.api.service.AdminService;
import com.andrew.hnt.api.service.LoginService;
import com.andrew.hnt.api.service.impl.MqttServiceImpl;
import com.andrew.hnt.api.util.StringUtil;
import okhttp3.*;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.databind.ObjectMapper;

@Controller
@RequestMapping("/main")
public class MainController extends DefaultController {

	@Autowired
	private LoginService loginService;
	
	@Autowired
	private AdminService adminService;

	@Autowired
	private MqttServiceImpl mqttService;
	
	@Autowired
	private CommonController commonController;

	private Logger logger = LoggerFactory.getLogger(this.getClass());

	private String apiKey = "AAAAoUCvVY0:APA91bFhv_a-RRU0OOJPmGk4MBri_Aqu0MW4r1CDfar4GrhQf3H9XPTWRhoul86dfhLTomTn-WsTrKJ-qPAakoap9vMl7JHmrj8WniVnTQE3y5mhxKFDPp09bAmjaAuDx8qUXH1qhO05";
	private String senderId = "692574967181";

	@RequestMapping(value = "/main", method = RequestMethod.GET)
	public String main(
			HttpServletRequest req
			, HttpServletResponse res
			, @RequestParam(name = "sensorId", required = false) String sensorId
			, @RequestParam(name = "userId", required = false) String userId
			, @RequestParam(name = "userNm", required = false) String userNm
			, @RequestParam(name = "userGrade", required = false) String userGrade
			, @RequestParam(name = "userEmail", required = false) String userEmail
			, @RequestParam(name = "userTel", required = false) String userTel
	        , Model model) {
		
		// 캐시 방지 헤더 설정
		res.setHeader("Cache-Control", "no-cache, no-store, must-revalidate");
		res.setHeader("Pragma", "no-cache");
		res.setHeader("Expires", "0");

		String result = "";
		HttpSession session = req.getSession();

		// 세션에서 사용자 정보 확인
		String sessionUserId = (String) session.getAttribute("userId");
		String sessionUserGrade = (String) session.getAttribute("userGrade");
		String sessionUserNm = (String) session.getAttribute("userNm");
		
		logger.info("=== 세션 정보 확인 ===");
		logger.info("세션 userId: {}, userGrade: {}, userNm: {}", sessionUserId, sessionUserGrade, sessionUserNm);
		logger.info("URL 파라미터 userId: {}, userGrade: {}, userNm: {}", userId, userGrade, userNm);
		
		// 앱에서 전달받은 사용자 정보가 있으면 즉시 세션에 설정 (앱 로그인 예외 처리)
		if (!StringUtil.isEmpty(userId) && !StringUtil.isEmpty(userGrade)) {
			logger.info("앱에서 전달받은 사용자 정보를 세션에 즉시 설정 - userId: {}, userGrade: {}, userNm: {}", 
					   userId, userGrade, userNm);
			
			// 앱에서 전달받은 사용자 정보를 세션에 설정 (신뢰)
			session.setAttribute("userId", userId);
			session.setAttribute("userGrade", userGrade);
			if (!StringUtil.isEmpty(userNm)) {
				session.setAttribute("userNm", userNm);
			}
			
			// 로컬 변수 업데이트
			sessionUserId = userId;
			sessionUserGrade = userGrade;
			sessionUserNm = userNm;
			
			logger.info("세션 설정 완료 - sessionUserId: {}, sessionUserGrade: {}, sessionUserNm: {}", 
					   sessionUserId, sessionUserGrade, sessionUserNm);
		}

        // 세션 유효성 검사 (이제 세션에 사용자 정보가 있음)
        if (!isValidSession(session)) {
            logger.warn("세션이 유효하지 않음 - 로그인 페이지로 리다이렉트");
            return "redirect:/login/login";
        }

        // 권한 검사 (세션 기반)
        if (!hasPermission(session, "B")) {
            return "redirect:/login/login";
        }
		
		// URL 파라미터로 전달된 userNm이 있으면 우선 사용 (앱에서 로그인 후 접속 시)
		if(!StringUtil.isEmpty(userNm)) {
			// URL 파라미터의 userNm을 세션에 설정
			session.setAttribute("userNm", userNm);
		} else if(!StringUtil.isEmpty(sessionUserNm)) {
			// URL 파라미터가 없으면 세션에서 사용자 정보 사용
			userNm = sessionUserNm;
		}
		
		// 세션에 설정된 최종 값을 모델에 설정 (중복 제거)
		model.addAttribute("userId", sessionUserId);
		model.addAttribute("userGrade", sessionUserGrade);
		model.addAttribute("userNm", sessionUserNm);
        
        logger.info("=== 모델 속성 설정 완료 ===");
        logger.info("모델 userId: {}, userGrade: {}, userNm: {}", 
                   model.asMap().get("userId"), model.asMap().get("userGrade"), model.asMap().get("userNm"));
        
        // 새로운 방식: DB에서 직접 사이드바 데이터 조회
		commonController.addSidebarData(sessionUserId, model, session);
		
		if(null != sessionUserId && !"".equals(sessionUserId) && !"null".equals(sessionUserId) && !"undefined".equals(sessionUserId)) {
			Map<String, Object> userMap = new HashMap<String, Object>();
			List<UserInfo> userList = new ArrayList<UserInfo>();
			List<Map<String, Object>> sensorList = new ArrayList<Map<String, Object>>();
			String defaultUuid = "";
			String sensorType = "";
			String topicStr = "";

			logger.info("센서 리스트 조회 시작 - sessionUserId: {}", sessionUserId);

			try {
				userMap = loginService.getUserList();
				sensorList = adminService.getSensorList(sessionUserId);

				if (null != userMap && 0 < userMap.size()) {
					userList = (List<UserInfo>) userMap.get("userList");

					if (null != userList && 0 < userList.size()) {
						model.addAttribute("userList", userList);
					}
				}

				if (null != sensorList && 0 < sensorList.size()) {
					model.addAttribute("sensorList", sensorList);

					for(int i=0; i < sensorList.size(); i++) {
						String topic = "";
						topic = "HBEE/"+String.valueOf(sensorList.get(i).get("sensor_id"))+"/"+String.valueOf(sensorList.get(i).get("sensor_type"))+"/"+String.valueOf(sensorList.get(i).get("sensor_uuid"))+"/SER";
						sensorList.get(i).put("topicStr", topic);
					}

					if(null != sensorId && !"".equals(sensorId)) {
						defaultUuid = sensorId;
					} else {
						defaultUuid = String.valueOf(sensorList.get(0).get("sensor_uuid"));
					}
					model.addAttribute("defaultUuid", defaultUuid);
					sensorType = String.valueOf(sensorList.get(0).get("sensor_type"));
				}

				topicStr = "HBEE/"+sessionUserId+"/"+sensorType+"/"+defaultUuid+"/SER";
				model.addAttribute("topicStr", topicStr);
			} catch (Exception e) {
				logger.error("Error : " + e.toString());
			}

			// 세션 정보는 이미 CommonController에서 처리됨
			// sensorId는 실제 센서 소유자 ID (sensor_id 값 사용)
			String actualSensorId = "";
			if (null != sensorList && 0 < sensorList.size()) {
				// 첫 번째 센서의 sensor_id를 사용
				actualSensorId = String.valueOf(sensorList.get(0).get("sensor_id"));
			} else {
				// 센서 리스트가 없으면 현재 사용자 ID 사용
				actualSensorId = sessionUserId;
			}
            model.addAttribute("sensorId", actualSensorId);
            try {
                session.setAttribute("sensorId", actualSensorId);
            } catch (Exception ignore) {}
			

			logger.info("Model attributes:");
			logger.info("userId in model: " + model.asMap().get("userId"));
			logger.info("userGrade in model: " + model.asMap().get("userGrade"));
			
			// loginUserId 설정 (세션 userId 사용)
			String sessionLoginUserId = (String) session.getAttribute("loginUserId");
			if (!StringUtil.isEmpty(sessionLoginUserId)) {
				model.addAttribute("loginUserId", sessionLoginUserId);
			} else {
				model.addAttribute("loginUserId", sessionUserId);
			}
			
			logger.info("Final model attributes - userId: {}, userGrade: {}, loginUserId: {}", 
			           model.asMap().get("userId"), model.asMap().get("userGrade"), model.asMap().get("loginUserId"));

			// U 등급 사용자의 부계정 목록 조회
			String currentUserGrade = String.valueOf(session.getAttribute("userGrade"));
			logger.info("Current user grade: " + currentUserGrade + ", sessionUserId: " + sessionUserId);
			if("U".equals(currentUserGrade)) {
				try {
					// 디버깅을 위해 직접 쿼리 결과 확인
					logger.info("Checking sub users for sessionUserId: " + sessionUserId);
					Map<String, Object> subUserMap = loginService.getSubUserList(sessionUserId);
					logger.info("SubUserMap result: " + subUserMap);
					if(null != subUserMap && subUserMap.size() > 0) {
						List<UserInfo> subUserList = (List<UserInfo>) subUserMap.get("userList");
						logger.info("SubUserList size: " + (subUserList != null ? subUserList.size() : "null"));
						if(null != subUserList && subUserList.size() > 0) {
							model.addAttribute("hasSubUsers", true);
							logger.info("hasSubUsers set to true");
							// 부계정 목록 출력
							for(UserInfo subUser : subUserList) {
								logger.info("Sub user found: " + subUser.getUserId() + " (grade: " + subUser.getUserGrade() + ")");
							}
						} else {
							model.addAttribute("hasSubUsers", false);
							logger.info("hasSubUsers set to false - no sub users found");
						}
					} else {
						model.addAttribute("hasSubUsers", false);
						logger.info("hasSubUsers set to false - subUserMap is null or empty");
					}
				} catch(Exception e) {
					logger.error("Error getting sub users: " + e.toString());
					model.addAttribute("hasSubUsers", false);
				}
			} else {
				model.addAttribute("hasSubUsers", true); // A 등급은 항상 true
				logger.info("hasSubUsers set to true - user is A grade");
			}
			
			// U 등급 사용자에게 항상 사용자관리 메뉴가 보이도록 설정 (임시)
			if("U".equals(currentUserGrade)) {
				model.addAttribute("hasSubUsers", true);
				logger.info("Force setting hasSubUsers to true for U grade user");
			}
			
			// U 등급 사용자에게 항상 사용자관리 메뉴가 보이도록 설정
			if("U".equals(currentUserGrade)) {
				model.addAttribute("hasSubUsers", true);
				logger.info("Setting hasSubUsers to true for U grade user - always show user management menu");
			}

            String tmpToken = "";
            try {
                UserInfo tokenUser = loginService.getUserInfoByUserId(String.valueOf(session.getAttribute("userId")));
                if (tokenUser != null) {
                    tmpToken = tokenUser.getToken();
                    session.setAttribute("token", tmpToken);
                    model.addAttribute("token", tmpToken);
                }
            } catch(Exception e) {
                logger.error("Error getting token by userId: " + e.toString());
            }

			result = "main/main";
		} else {
			result = "redirect:/login/login";
		}

		return result;
	}

	@RequestMapping(value = "/insertSensorInfo", method = RequestMethod.POST)
	public @ResponseBody Map<String, Object> insertSensorInfo(
			HttpServletRequest req
			, HttpServletResponse res
			, @RequestBody Map<String, Object> insertData
	) {
		Map<String, Object> resultMap = new HashMap<String, Object>();

		HttpSession session = req.getSession();

		if(null != session) {
			if(null != insertData && 0 < insertData.size()) {
				// 앱 수정 불가로 인해 자동으로 요청 타입 구분
				String sensorName = String.valueOf(insertData.get("sensorName"));
				String uuid = String.valueOf(insertData.get("uuid"));
				String userId = String.valueOf(insertData.get("userId"));
				
				// kimtest 사용자만 로깅 (로그 스팸 방지)
				if("kimtest".equals(userId)) {
					logger.info("=== kimtest 자동 요청 타입 구분 시작 ===");
					logger.info("sensorName: '{}', uuid: '{}'", sensorName, uuid);
				}
				
				if (String.valueOf(insertData.get("userId")).equals(String.valueOf(session.getAttribute("userId")))) {
					
					// sensorName이 null이고 uuid만 있는 경우 = 장치 상태 확인 요청 (앱에서 자동 호출)
					if((sensorName == null || "null".equals(sensorName) || "".equals(sensorName)) && 
					   (uuid != null && !"null".equals(uuid) && !"".equals(uuid))) {
						
						// kimtest 사용자만 로깅
						if("kimtest".equals(userId)) {
							logger.info("✅ kimtest 앱 자동 호출 감지 - 장치 상태 확인 요청으로 처리 (DB 쿼리 없음)");
							logger.info("userId: {}, uuid: {}", insertData.get("userId"), uuid);
						}
						
						// 장치 상태 확인 응답 (DB 쿼리 없음, 빠른 응답)
						resultMap.put("resultCode", "200");
						resultMap.put("resultMsg", "장치 상태 확인 완료");
						resultMap.put("deviceStatus", "registered"); // 이미 등록된 장치
						resultMap.put("userId", insertData.get("userId"));
						resultMap.put("uuid", uuid);
						
						return resultMap;
					}
					
					// sensorName이 있는 경우 = 실제 장치 등록 요청
					// kimtest 사용자만 로깅
					if("kimtest".equals(userId)) {
						logger.info("✅ kimtest 실제 장치 등록 요청으로 인식 - 중복등록 체크 수행");
					}
					
					Map<String, Object> param = new HashMap<String, Object>();
					param.put("userId", String.valueOf(session.getAttribute("userId")));
					param.put("sensorUuid", String.valueOf(insertData.get("uuid")));
					param.put("sensorId", String.valueOf(insertData.get("userId")));
					param.put("sensorType", "TC");
					param.put("chartType", "none");    // 챠트 기본 설정값은 none
					param.put("instId", "hnt");
					param.put("mdfId", "hnt");
					
					// 장치 이름 파라미터 추가
					if(insertData.get("sensorName") != null && !"".equals(String.valueOf(insertData.get("sensorName")))) {
						param.put("sensorName", String.valueOf(insertData.get("sensorName")));
						// kimtest 사용자만 로깅
						if("kimtest".equals(userId)) {
							logger.info("kimtest 장치 이름 변경 요청 감지 - sensorName: {}", insertData.get("sensorName"));
						}
					} else {
						// kimtest 사용자만 로깅
						if("kimtest".equals(userId)) {
							logger.info("kimtest sensorName 파라미터가 없음 - insertData.get('sensorName'): {}", insertData.get("sensorName"));
						}
					}
					
					// kimtest 사용자만 로깅
					if("kimtest".equals(userId)) {
						logger.info("kimtest 장치 등록 요청으로 인식 - LoginServiceImpl로 전달할 param: {}", param);
					}

					try {
						Map<String, Object> chkMap = new HashMap<String, Object>();
						chkMap = loginService.insertSensorInfo2(param);

						if(null != chkMap && 0 < chkMap.size()) {
							if("true".equals(String.valueOf(chkMap.get("result")))) {
								resultMap.put("resultCode", "200");
								if(chkMap.get("message") != null) {
									resultMap.put("resultMsg", String.valueOf(chkMap.get("message")));
								} else {
									resultMap.put("resultMsg", "success");
								}
							} else {
								// 중복 등록 또는 기타 오류
								resultMap.put("resultCode", "400");
								if(chkMap.get("message") != null) {
									resultMap.put("resultMsg", String.valueOf(chkMap.get("message")));
								} else {
									resultMap.put("resultMsg", "장치 등록 실패");
								}
							}
						}
					} catch (Exception e) {
						logger.error("Error : " + e.toString());
						resultMap.put("resultCode", "999");
						resultMap.put("resultMsg", "장치 등록 중 오류가 발생했습니다.");
					}
				}
			}
		}

		return resultMap;
	}

	@RequestMapping(value = "/getData", method = RequestMethod.POST)
	public @ResponseBody Map<String, Object> getData(
			HttpServletRequest req
			, HttpServletResponse res
			, @RequestBody DataVO dataVO
	        ) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		
		try {
			// MQTT 서비스에서 실시간 데이터만 조회
			Map<String, Object> dataMap = mqttService.getData();
			
			if(null != dataMap && 0 < dataMap.size()) {
				// 실시간 센서 데이터만 처리 (장치 등록 로직 완전 제거)
				String sensorValue = String.valueOf(dataMap.get("data"));
				String uuid = String.valueOf(dataMap.get("sensorUuid"));
				String sensorType = String.valueOf(dataMap.get("sensorType"));
				
				// 온도 데이터 응답
				if("ain".equals(String.valueOf(dataMap.get("name")))) {
					resultMap.put("resultCode", "200");
					resultMap.put("dataVal", sensorValue);
					resultMap.put("uuid", uuid);
					resultMap.put("sensorType", sensorType);
					
					// kimtest 사용자만 로깅 (로그 스팸 방지)
					if("kimtest".equals(String.valueOf(dataMap.get("sensorId")))) {
						logger.info("kimtest MQTT 실시간 데이터 처리: uuid={}, value={}", uuid, sensorValue);
					}
				}
				
				// 상태 데이터 응답
				if("din".equals(String.valueOf(dataMap.get("name")))) {
					resultMap.put("resultCode", "200");
					resultMap.put("dinVal", String.valueOf(dataMap.get("dinVal")));
					resultMap.put("uuid", uuid);
				}
				
				if("output".equals(String.valueOf(dataMap.get("name")))) {
					resultMap.put("resultCode", "200");
					resultMap.put("outputVal", String.valueOf(dataMap.get("outputVal")));
					resultMap.put("uuid", uuid);
				}
			}
		} catch(Exception e) {
			logger.error("Error in getData: " + e.toString());
			resultMap.put("resultCode", "500");
			resultMap.put("resultMsg", "데이터 처리 중 오류가 발생했습니다.");
		}
		
		return resultMap;
	}

	public void insertSensorData(SensorVO sensorVO) {
		try {
			loginService.insertSensorData(sensorVO);
		} catch(Exception e) {
			logger.error("Error : " + e.toString());
		}
	}

	public void sendNoti(Map<String, Object> noti) {
		if(null != noti && 0 < noti.size()) {
			OkHttpClient client = new OkHttpClient.Builder().build();

			String inTemp = "";
			String curTemp = "";
			String gu = "";
			String warnText = "";
			String inType = "";
			String sensorName = "";

			gu = String.valueOf(noti.get("gu"));
			inTemp = String.valueOf(noti.get("inTemp"));
			curTemp = String.valueOf(noti.get("curTemp"));
			inType = String.valueOf(noti.get("inType"));
			sensorName = String.valueOf(noti.get("sensor_uuid"));

			if(null != gu && !"".equals(gu) && 0 < gu.length()) {
				if("ain".equals(gu)) {
					if(null != inType && !"".equals(inType) && 0 < inType.length()) {
						if("high".equals(inType)) {
							warnText = "온도 높음(설정온도 : " + curTemp + "°C, 현재온도 : " + inTemp + "°C)";
						} else if("low".equals(inType)) {
							warnText = "온도 낮음(설정온도 : " + curTemp + "°C, 현재온도 : " + inTemp + "°C)";
						}
					}
				} else if("din".equals(gu)) {
					warnText = "DI알람(에러, 현재온도 : " + inTemp +")";
				} else if("netError".equals(gu)) {
					warnText = "통신에러";
				}
			}

			okhttp3.RequestBody body = new FormBody.Builder()
					.add("to", String.valueOf(noti.get("token")))
					.add("project_id", senderId)
					.add("notification", "")
					.add("data", sensorName + "장치 이상 발생 : " + warnText)
					.build();

			Request request = new Request.Builder()
					.url("https://fcm.googleapis.com/fcm/send")
					.addHeader("Authorization", "key=" + apiKey)
					.post(body)
					.build();

			client.newCall(request).enqueue(new Callback() {
				@Override
				public void onFailure(@NotNull Call call, @NotNull IOException e) {
					logger.error("Error");
				}

				@Override
				public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
					if (response.isSuccessful()) {
						logger.info("Success : " + response.code() + "/" + response.body().string());
					} else {
						logger.info("Fail : " + response.code() + "/" + response.body().string());
					}
				}
			});
		}
	}

	@RequestMapping(value = "/sendAlarm", method = RequestMethod.POST)
	public @ResponseBody Map<String, Object> sendAlarm(
			HttpServletRequest req
			, HttpServletResponse res
			, @RequestBody Map<String, Object> reqMap
	) {
		Map<String, Object> resultMap = new HashMap<String, Object>();

		if(null != reqMap && 0 < reqMap.size()) {
			Map<String, Object> config = new HashMap<String, Object>();
			Map<String, Object> sensorInfo = new HashMap<String, Object>();
			Map<String, Object> confParam = new HashMap<String, Object>();
			String token = "";

			confParam.put("userId", String.valueOf(reqMap.get("userId")));
			confParam.put("sensorId", String.valueOf(reqMap.get("sensorId")));
			confParam.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));

			token = String.valueOf(reqMap.get("token"));
			if(StringUtil.isEmpty(token)) {
				LoginVO loginVO = new LoginVO();
				UserInfo userInfo = new UserInfo();
				Map<String, Object> userMap = new HashMap<String, Object>();
				loginVO.setUserId(String.valueOf(reqMap.get("userId")));

				try {
					userMap = loginService.getUserInfo(loginVO);

					if(null != userMap && 0 < userMap.size()) {
						userInfo = (UserInfo) userMap.get("userInfo");

						if(null != userInfo) {
							token = userInfo.getToken();
							reqMap.put("token", token);
						}
					}
				} catch(Exception e) {
					logger.error("Error : " + e.toString());
				}
			}

			String sensorName = "";

			// 인입된 온도와 설정의 온도를 비교하여 알람 세팅 진행
			String highTemp = "";
			String lowTemp = "";
			String specificTemp = "";
			String highAlarmYn = "";
			String lowAlarmYn = "";
			String highAlarmTime = "";
			String lowAlarmTime = "";
			String highAlarmDelayTime = "";
			String lowAlarmDelayTime = "";
			String specificAlarmTime = "";
			String specificAlarmDelayTime = "";
			String specificAlarmYn = "";
			String diAlarmTime = "";
			String diAlarmDelayTime = "";
			String diAlarmYn = "";

			String networkAlarmTime = "";
			String networkDelayTime = "";
			String networkAlarmYn = "";

			config = adminService.selectSetting(confParam);
			sensorInfo = adminService.getSensorInfo(confParam);

			if(null != config && 0 < config.size()) {
				highTemp = String.valueOf(config.get("set_val1"));
				lowTemp = String.valueOf(config.get("set_val2"));
				specificTemp = String.valueOf(config.get("set_val3"));
				highAlarmYn = String.valueOf(config.get("alarm_yn1"));
				lowAlarmYn = String.valueOf(config.get("alarm_yn2"));
				highAlarmTime = String.valueOf(config.get("delay_time1"));
				lowAlarmTime = String.valueOf(config.get("delay_time2"));
				highAlarmDelayTime = String.valueOf(config.get("re_delay_time1"));
				lowAlarmDelayTime = String.valueOf(config.get("re_delay_time2"));

				specificAlarmTime = String.valueOf(config.get("delay_time3"));
				specificAlarmDelayTime = String.valueOf(config.get("re_delay_time3"));
				specificAlarmYn = String.valueOf(config.get("alarm_yn3"));

				diAlarmTime = String.valueOf(config.get("delay_time4"));
				diAlarmDelayTime = String.valueOf(config.get("re_delay_time4"));
				diAlarmYn = String.valueOf(config.get("alarm_yn4"));

				networkAlarmTime = String.valueOf(config.get("delay_time5"));
				networkDelayTime = String.valueOf(config.get("re_delay_time5"));
				networkAlarmYn = String.valueOf(config.get("alarm_yn5"));
			}

			if(null != sensorInfo && 0 < sensorInfo.size()) {
				sensorName = String.valueOf(sensorInfo.get("sensor_name"));
			}

			String in_name = "";
			in_name = String.valueOf(reqMap.get("name"));

			String curTemp = "";
			curTemp = adminService.getCurTemp(confParam);

			if(null != in_name && !"".equals(in_name) && 0 < in_name.length()) {
				if ("ain".equals(in_name)) {
					if (null != config && 0 < config.size()) {
						if (String.valueOf(reqMap.get("sensorUuid")).equals(String.valueOf(config.get("sensor_uuid")))) {
							// 인입된 온도가 설정 온도 이상인 경우 (high와 비교)
							// 1. 알람 사용 유무 확인
							if (null != highAlarmYn && !"".equals(highAlarmYn)) {
								// 2. 알람 사용으로 되어 있는 경우 온도 비교
								if ("Y".equals(highAlarmYn)) {
									if (Double.compare(Double.parseDouble(String.valueOf(reqMap.get("sensorValue"))), Double.parseDouble(highTemp)) > 0) {
										if (!"0".equals(highAlarmTime)) {
											// 알람 지연 시간이 즉시가 아닌 경우에는 알람 발송 테이블에 저장
											Map<String, Object> notiMap = new HashMap<String, Object>();
											notiMap.put("userId", String.valueOf(reqMap.get("userId")));
											notiMap.put("userToken", String.valueOf(reqMap.get("token")));
											notiMap.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
											notiMap.put("addTime", highAlarmTime);
											notiMap.put("alarmType", "high");
											notiMap.put("inTemp", String.valueOf(reqMap.get("sensorValue")));
											notiMap.put("curTemp", highTemp);
											notiMap.put("urgentYn", "Y");

											Map<String, Object> chkMap = new HashMap<String, Object>();
											chkMap = adminService.selectChkNoti(notiMap);

											// 이미 알람이 들어있는지 확인 후 없으면 입력
											if (null != chkMap && 0 < chkMap.size()) {
												logger.error("Error chkmap : " + chkMap.size());
											} else {
												//logger.error("Error insert noti");
												adminService.insertNoti(notiMap);
											}
										} else {
											// DB에서 즉시 발송 이력 확인되는 경우 발송 제외 처리 추가
											Map<String, Object> chkUrgent = new HashMap<String, Object>();
											Map<String, Object> chkRelease = new HashMap<String, Object>();
											Map<String, Object> chkMap = new HashMap<String, Object>();
											boolean urgentYn = false;
											boolean releaseYn = false;
											boolean existYn = false;
											chkMap.put("userId", String.valueOf(reqMap.get("userId")));
											chkMap.put("userToken", String.valueOf(reqMap.get("token")));
											chkMap.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
											chkMap.put("alarmType", "high");
											chkMap.put("reDelayTime", highAlarmDelayTime);

											chkUrgent = adminService.selectUrgentNoti(chkMap);
											if(null != chkUrgent && 0 < chkUrgent.size()) {
												int urgentCnt = 0;
												urgentCnt = Integer.parseInt(String.valueOf(chkUrgent.get("cnt")));

												if(0 < urgentCnt) {
													urgentYn = true;
												}
											}

											// 해제 되었다 다시 오류가 인입된 경우에는 발송 처리 추가
											chkRelease = adminService.selectReleaseNoti(chkMap);
											if(null != chkRelease && 0 < chkRelease.size()) {
												int releaseCnt = 0;
												releaseCnt = Integer.parseInt(String.valueOf(chkRelease.get("cnt")));

												if(0 < releaseCnt) {
													releaseYn = true;
												}
											}

											Map<String, Object> notiMap = new HashMap<String, Object>();
											notiMap.put("userId", String.valueOf(reqMap.get("userId")));
											notiMap.put("userToken", String.valueOf(reqMap.get("token")));
											notiMap.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
											notiMap.put("addTime", highAlarmTime);
											notiMap.put("alarmType", "rehigh");
											notiMap.put("inTemp", String.valueOf(reqMap.get("sensorValue")));
											notiMap.put("curTemp", highTemp);

											Map<String, Object> chk = new HashMap<String, Object>();
											chk = adminService.selectNoti(notiMap);

											if(null != chk && 0 < chk.size()) {
												existYn = true;
											}

											// 긴급 발송 건이 없거나 오류가 해제된 경우에 발송
											if(!urgentYn || releaseYn) {
												// 알람 지연 시간이 0 으로 즉시인 경우 바로 알람 발송 (알람 발송 테이블 저장 X)
												Map<String, Object> noti = new HashMap<String, Object>();
												noti.put("token", String.valueOf(reqMap.get("token")));
												noti.put("sensor_uuid", sensorName);
												noti.put("type", "온도 높음");
												noti.put("inType", "high");
												noti.put("gu", "ain");
												noti.put("inTemp", String.valueOf(reqMap.get("sensorValue")));
												noti.put("curTemp", highTemp);
												sendNoti(noti);

												// DB에 즉시 발송 이력 저장
												Map<String, Object> urgent = new HashMap<String, Object>();
												urgent.put("userId", String.valueOf(reqMap.get("userId")));
												urgent.put("userToken", String.valueOf(reqMap.get("token")));
												urgent.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
												urgent.put("addTime", highAlarmTime);
												urgent.put("alarmType", "high");
												urgent.put("inTemp", String.valueOf(reqMap.get("sensorValue")));
												urgent.put("curTemp", highTemp);
												urgent.put("urgentYn", "Y");

												adminService.insertUrgentNoti(urgent);
											}

										}

										if (!"0".equals(highAlarmDelayTime)) {
											// 재전송 지연 시간이 즉시가 아닌 경우 알람 발송 테이블에 저장
											Map<String, Object> notiMap = new HashMap<String, Object>();
											notiMap.put("userId", String.valueOf(reqMap.get("userId")));
											notiMap.put("userToken", String.valueOf(reqMap.get("token")));
											notiMap.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
											notiMap.put("addTime", Integer.parseInt(highAlarmTime) + Integer.parseInt(highAlarmDelayTime));
											notiMap.put("alarmType", "rehigh");
											notiMap.put("inTemp", String.valueOf(reqMap.get("sensorValue")));
											notiMap.put("curTemp", highTemp);
											notiMap.put("urgentYn", "N");

											Map<String, Object> chkMap = new HashMap<String, Object>();
											chkMap = adminService.selectNoti(notiMap);

											// 이미 알람이 들어있는지 확인 후 없으면 입력
											if (null != chkMap && 0 < chkMap.size()) {
												//logger.error("Error chkmap : " + chkMap.size());
											} else {
												//logger.error("Error insert noti");
												adminService.insertNoti(notiMap);
											}
										}

									} else {
										// 발송 전 정상 데이터가 인입된 경우 DB 데이터 확인하여 이미 들어가 있는 발송 대상건이 있으면 발송되지 않도록 처리
										Map<String, Object> notiMap = new HashMap<String, Object>();
										notiMap.put("userId", String.valueOf(reqMap.get("userId")));
										notiMap.put("userToken", String.valueOf(reqMap.get("token")));
										notiMap.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
										notiMap.put("addTime", highAlarmTime);
										notiMap.put("alarmType", "high");
										notiMap.put("inTemp", String.valueOf(reqMap.get("sensorValue")));
										notiMap.put("curTemp", highTemp);

										Map<String, Object> chkMap = new HashMap<String, Object>();
										Map<String, Object> chkMap2 = new HashMap<String, Object>();

										chkMap = adminService.selectNoti(notiMap);
										chkMap2 = adminService.selectUrgentNoti(notiMap);

										// 이미 알람이 들어있는지 확인 후 없으면 입력
										if (null != chkMap && 0 < chkMap.size()) {
											Map<String, Object> param = new HashMap<String, Object>();
											param.put("userId", chkMap.get("user_id"));
											param.put("userToken", chkMap.get("user_token"));
											param.put("no", chkMap.get("no"));
											param.put("releaseYn", "Y");
											param.put("sensorUuid", chkMap.get("sensor_uuid"));

											try {
												adminService.updateNoti(param);
											} catch(Exception e) {
												logger.error("Error : " + e.toString());
												e.printStackTrace();
											}
										}

										if(null != chkMap2 && 0 < chkMap2.size()) {
											Map<String, Object> param = new HashMap<String, Object>();
											param.put("userId", String.valueOf(reqMap.get("userId")));
											param.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
											param.put("alarmType", "high");

											try {
												adminService.updateUrgentNoti(param);
											} catch(Exception e) {
												logger.error("Error : " + e.toString());
											}
										}

										notiMap.remove("alarmType");
										notiMap.put("alarmType", "rehigh");

										chkMap = new HashMap<String, Object>();
										chkMap = adminService.selectNoti(notiMap);

										// 이미 알람이 들어있는지 확인 후 없으면 입력
										if (null != chkMap && 0 < chkMap.size()) {
											Map<String, Object> param = new HashMap<String, Object>();
											param.put("userId", chkMap.get("user_id"));
											param.put("userToken", chkMap.get("user_token"));
											param.put("no", chkMap.get("no"));
											param.put("releaseYn", "Y");
											param.put("sensorUuid", chkMap.get("sensor_uuid"));

											try {
												adminService.updateNoti(param);
											} catch(Exception e) {
												logger.error("Error : " + e.toString());
												e.printStackTrace();
											}
										}
									}
								}
							}

							// 인입된 온도가 설정 온도 이하인 경우 (low와 비교)
							if (null != lowAlarmYn && !"".equals(lowAlarmYn)) {
								if ("Y".equals(lowAlarmYn)) {
									if (Double.compare(Double.parseDouble(String.valueOf(reqMap.get("sensorValue"))), Double.parseDouble(lowTemp)) < 0) {
										if (!"0".equals(lowAlarmTime)) {
											Map<String, Object> notiMap = new HashMap<String, Object>();
											notiMap.put("userId", String.valueOf(reqMap.get("userId")));
											notiMap.put("userToken", String.valueOf(reqMap.get("token")));
											notiMap.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
											notiMap.put("addTime", lowAlarmTime);
											notiMap.put("alarmType", "low");
											notiMap.put("inTemp", String.valueOf(reqMap.get("sensorValue")));
											notiMap.put("curTemp", lowTemp);
											notiMap.put("urgentYn", "Y");

											Map<String, Object> chkMap = new HashMap<String, Object>();
											chkMap = adminService.selectChkNoti(notiMap);

											// 이미 알람이 들어있는지 확인 후 없으면 입력
											if (null != chkMap && 0 < chkMap.size()) {
											} else {
												adminService.insertNoti(notiMap);
											}
										} else {
											// DB에서 즉시 발송 이력 확인되는 경우 발송 제외 처리 추가
											Map<String, Object> chkUrgent = new HashMap<String, Object>();
											Map<String, Object> chkRelease = new HashMap<String, Object>();
											Map<String, Object> chkMap = new HashMap<String, Object>();
											boolean urgentYn = false;
											boolean releaseYn = false;
											boolean existYn = false;
											chkMap.put("userId", String.valueOf(reqMap.get("userId")));
											chkMap.put("userToken", String.valueOf(reqMap.get("token")));
											chkMap.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
											chkMap.put("alarmType", "low");
											chkMap.put("reDelayTime", lowAlarmDelayTime);

											chkUrgent = adminService.selectUrgentNoti(chkMap);
											if(null != chkUrgent && 0 < chkUrgent.size()) {
												int urgentCnt = 0;
												urgentCnt = Integer.parseInt(String.valueOf(chkUrgent.get("cnt")));

												if(0 < urgentCnt) {
													urgentYn = true;
												}
											}

											// 해제 되었다 다시 오류가 인입된 경우에는 발송 처리 추가
											chkRelease = adminService.selectReleaseNoti(chkMap);
											if(null != chkRelease && 0 < chkRelease.size()) {
												int releaseCnt = 0;
												releaseCnt = Integer.parseInt(String.valueOf(chkRelease.get("cnt")));

												if(0 < releaseCnt) {
													releaseYn = true;
												}
											}

											Map<String, Object> notiMap = new HashMap<String, Object>();
											notiMap.put("userId", String.valueOf(reqMap.get("userId")));
											notiMap.put("userToken", String.valueOf(reqMap.get("token")));
											notiMap.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
											notiMap.put("addTime", lowAlarmTime);
											notiMap.put("alarmType", "relow");
											notiMap.put("inTemp", String.valueOf(reqMap.get("sensorValue")));
											notiMap.put("curTemp", lowTemp);

											Map<String, Object> chk = new HashMap<String, Object>();
											chk = adminService.selectNoti(notiMap);

											if(null != chk && 0 < chk.size()) {
												existYn = true;
											}

											// 긴급 발송건이 없거나 오류 해제된 경우
											if(!urgentYn || releaseYn) {
												Map<String, Object> noti = new HashMap<String, Object>();
												noti.put("token", String.valueOf(reqMap.get("token")));
												noti.put("sensor_uuid", sensorName);
												noti.put("type", "온도 낮음");
												noti.put("inType", "low");
												noti.put("gu", "ain");
												noti.put("inTemp", String.valueOf(reqMap.get("sensorValue")));
												noti.put("curTemp", lowTemp);
												sendNoti(noti);

												// DB에 즉시 발송 이력 저장
												Map<String, Object> urgent = new HashMap<String, Object>();
												urgent.put("userId", String.valueOf(reqMap.get("userId")));
												urgent.put("userToken", String.valueOf(reqMap.get("token")));
												urgent.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
												urgent.put("addTime", highAlarmTime);
												urgent.put("alarmType", "low");
												urgent.put("inTemp", String.valueOf(reqMap.get("sensorValue")));
												urgent.put("curTemp", lowTemp);
												urgent.put("urgentYn", "Y");

												adminService.insertUrgentNoti(urgent);
											}
										}

										if (!"0".equals(lowAlarmDelayTime)) {
											Map<String, Object> notiMap = new HashMap<String, Object>();
											notiMap.put("userId", String.valueOf(reqMap.get("userId")));
											notiMap.put("userToken", String.valueOf(reqMap.get("token")));
											notiMap.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
											notiMap.put("addTime", Integer.parseInt(lowAlarmTime) + Integer.parseInt(lowAlarmDelayTime));
											notiMap.put("alarmType", "relow");
											notiMap.put("inTemp", String.valueOf(reqMap.get("sensorValue")));
											notiMap.put("curTemp", lowTemp);
											notiMap.put("urgentYn", "N");

											Map<String, Object> chkMap = new HashMap<String, Object>();
											chkMap = adminService.selectNoti(notiMap);

											// 이미 알람이 들어있는지 확인 후 없으면 입력
											if (null != chkMap && 0 < chkMap.size()) {
											} else {
												adminService.insertNoti(notiMap);
											}
										}

									} else {
										// DB 확인하여 이미 발송 대상 알람이 있으면 발송되지 않도록 처리
										Map<String, Object> notiMap = new HashMap<String, Object>();
										notiMap.put("userId", String.valueOf(reqMap.get("userId")));
										notiMap.put("userToken", String.valueOf(reqMap.get("token")));
										notiMap.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
										notiMap.put("addTime", lowAlarmTime);
										notiMap.put("alarmType", "low");
										notiMap.put("inTemp", String.valueOf(reqMap.get("sensorValue")));
										notiMap.put("curTemp", lowTemp);

										Map<String, Object> chkMap = new HashMap<String, Object>();
										Map<String, Object> chkMap2 = new HashMap<String, Object>();

										chkMap = adminService.selectNoti(notiMap);
										chkMap2 = adminService.selectUrgentNoti(notiMap);

										// 이미 알람이 들어있는지 확인 후 없으면 입력
										if (null != chkMap && 0 < chkMap.size()) {
											Map<String, Object> param = new HashMap<String, Object>();
											param.put("userId", chkMap.get("user_id"));
											param.put("userToken", chkMap.get("user_token"));
											param.put("no", chkMap.get("no"));
											param.put("sensorUuid", chkMap.get("sensor_uuid"));

											try {
												adminService.updateNoti(param);
											} catch(Exception e) {
												logger.error("Error : " + e.toString());
												e.printStackTrace();
											}
										}

										if(null != chkMap2 && 0 < chkMap2.size()) {
											Map<String, Object> param = new HashMap<String, Object>();
											param.put("userId", String.valueOf(reqMap.get("userId")));
											param.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
											param.put("alarmType", "low");

											try {
												adminService.updateUrgentNoti(param);
											} catch(Exception e) {
												logger.error("Error : " + e.toString());
											}
										}

										notiMap.remove("alarmType");
										notiMap.put("alarmType", "relow");

										chkMap = new HashMap<String, Object>();
										chkMap = adminService.selectNoti(notiMap);

										if(null != chkMap && 0 < chkMap.size()) {
											Map<String, Object> param = new HashMap<String, Object>();
											param.put("userId", chkMap.get("user_id"));
											param.put("userToken", chkMap.get("user_token"));
											param.put("no", chkMap.get("no"));
											param.put("sensorUuid", chkMap.get("sensor_uuid"));

											try {
												adminService.updateNoti(param);
											} catch(Exception e) {
												logger.error("Error : " + e.toString());
												e.printStackTrace();
											}
										}
									}
								}
							}
						}
					}
				} else if("ain".equals(in_name)) {
					// 특정온도알람 처리
					if (null != config && 0 < config.size()) {
						if (String.valueOf(reqMap.get("sensorUuid")).equals(String.valueOf(config.get("sensor_uuid")))) {
							// 특정온도알람 사용 유무 확인
							if (null != specificAlarmYn && !"".equals(specificAlarmYn)) {
								// 특정온도알람 사용으로 되어 있는 경우 온도 비교
								if ("Y".equals(specificAlarmYn)) {
									if (Double.compare(Double.parseDouble(String.valueOf(reqMap.get("sensorValue"))), Double.parseDouble(specificTemp)) == 0) {
										if (!"0".equals(specificAlarmTime)) {
											// 알람 지연 시간이 즉시가 아닌 경우에는 알람 발송 테이블에 저장
											Map<String, Object> notiMap = new HashMap<String, Object>();
											notiMap.put("userId", String.valueOf(reqMap.get("userId")));
											notiMap.put("userToken", String.valueOf(reqMap.get("token")));
											notiMap.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
											notiMap.put("addTime", specificAlarmTime);
											notiMap.put("alarmType", "specific");
											notiMap.put("inTemp", String.valueOf(reqMap.get("sensorValue")));
											notiMap.put("curTemp", specificTemp);
											notiMap.put("urgentYn", "Y");

											Map<String, Object> chkMap = new HashMap<String, Object>();
											chkMap = adminService.selectChkNoti(notiMap);

											// 이미 알람이 들어있는지 확인 후 없으면 입력
											if (null != chkMap && 0 < chkMap.size()) {
												logger.error("Error chkmap : " + chkMap.size());
											} else {
												adminService.insertNoti(notiMap);
											}
										} else {
											// DB에서 즉시 발송 이력 확인되는 경우 발송 제외 처리 추가
											Map<String, Object> chkUrgent = new HashMap<String, Object>();
											Map<String, Object> chkRelease = new HashMap<String, Object>();
											Map<String, Object> chkMap = new HashMap<String, Object>();
											boolean urgentYn = false;
											boolean releaseYn = false;
											boolean existYn = false;
											chkMap.put("userId", String.valueOf(reqMap.get("userId")));
											chkMap.put("userToken", String.valueOf(reqMap.get("token")));
											chkMap.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
											chkMap.put("alarmType", "specific");
											chkMap.put("reDelayTime", specificAlarmDelayTime);

											chkUrgent = adminService.selectUrgentNoti(chkMap);
											if(null != chkUrgent && 0 < chkUrgent.size()) {
												int urgentCnt = 0;
												urgentCnt = Integer.parseInt(String.valueOf(chkUrgent.get("cnt")));

												if(0 < urgentCnt) {
													urgentYn = true;
												}
											}

											// 해제 되었다 다시 오류가 인입된 경우에는 발송 처리 추가
											chkRelease = adminService.selectReleaseNoti(chkMap);
											if(null != chkRelease && 0 < chkRelease.size()) {
												int releaseCnt = 0;
												releaseCnt = Integer.parseInt(String.valueOf(chkRelease.get("cnt")));

												if(0 < releaseCnt) {
													releaseYn = true;
												}
											}

											Map<String, Object> notiMap = new HashMap<String, Object>();
											notiMap.put("userId", String.valueOf(reqMap.get("userId")));
											notiMap.put("userToken", String.valueOf(reqMap.get("token")));
											notiMap.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
											notiMap.put("addTime", specificAlarmTime);
											notiMap.put("alarmType", "respecific");
											notiMap.put("inTemp", String.valueOf(reqMap.get("sensorValue")));
											notiMap.put("curTemp", specificTemp);

											Map<String, Object> chk = new HashMap<String, Object>();
											chk = adminService.selectNoti(notiMap);

											if(null != chk && 0 < chk.size()) {
												existYn = true;
											}

											// 긴급 발송 건이 없거나 오류가 해제된 경우에 발송
											if(!urgentYn || releaseYn) {
												// 알람 지연 시간이 0 으로 즉시인 경우 바로 알람 발송 (알람 발송 테이블 저장 X)
												Map<String, Object> noti = new HashMap<String, Object>();
												noti.put("token", String.valueOf(reqMap.get("token")));
												noti.put("sensor_uuid", sensorName);
												noti.put("type", "특정온도 알람");
												noti.put("inType", "specific");
												noti.put("gu", "ain");
												noti.put("inTemp", String.valueOf(reqMap.get("sensorValue")));
												noti.put("curTemp", specificTemp);
												sendNoti(noti);

												// DB에 즉시 발송 이력 저장
												Map<String, Object> urgent = new HashMap<String, Object>();
												urgent.put("userId", String.valueOf(reqMap.get("userId")));
												urgent.put("userToken", String.valueOf(reqMap.get("token")));
												urgent.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
												urgent.put("addTime", specificAlarmTime);
												urgent.put("alarmType", "specific");
												urgent.put("inTemp", String.valueOf(reqMap.get("sensorValue")));
												urgent.put("curTemp", specificTemp);
												urgent.put("urgentYn", "Y");

												adminService.insertUrgentNoti(urgent);
											}
										}

										if (!"0".equals(specificAlarmDelayTime)) {
											// 재전송 지연 시간이 즉시가 아닌 경우 알람 발송 테이블에 저장
											Map<String, Object> notiMap = new HashMap<String, Object>();
											notiMap.put("userId", String.valueOf(reqMap.get("userId")));
											notiMap.put("userToken", String.valueOf(reqMap.get("token")));
											notiMap.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
											notiMap.put("addTime", Integer.parseInt(specificAlarmTime) + Integer.parseInt(specificAlarmDelayTime));
											notiMap.put("alarmType", "respecific");
											notiMap.put("inTemp", String.valueOf(reqMap.get("sensorValue")));
											notiMap.put("curTemp", specificTemp);
											notiMap.put("urgentYn", "N");

											Map<String, Object> chkMap = new HashMap<String, Object>();
											chkMap = adminService.selectNoti(notiMap);

											// 이미 알람이 들어있는지 확인 후 없으면 입력
											if (null != chkMap && 0 < chkMap.size()) {
												//logger.error("Error chkmap : " + chkMap.size());
											} else {
												//logger.error("Error insert noti");
												adminService.insertNoti(notiMap);
											}
										}

									} else {
										// 발송 전 정상 데이터가 인입된 경우 DB 데이터 확인하여 이미 들어가 있는 발송 대상건이 있으면 발송되지 않도록 처리
										Map<String, Object> notiMap = new HashMap<String, Object>();
										notiMap.put("userId", String.valueOf(reqMap.get("userId")));
										notiMap.put("userToken", String.valueOf(reqMap.get("token")));
										notiMap.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
										notiMap.put("addTime", specificAlarmTime);
										notiMap.put("alarmType", "specific");
										notiMap.put("inTemp", String.valueOf(reqMap.get("sensorValue")));
										notiMap.put("curTemp", specificTemp);

										Map<String, Object> chkMap = new HashMap<String, Object>();
										Map<String, Object> chkMap2 = new HashMap<String, Object>();

										chkMap = adminService.selectNoti(notiMap);
										chkMap2 = adminService.selectUrgentNoti(notiMap);

										// 이미 알람이 들어있는지 확인 후 없으면 입력
										if (null != chkMap && 0 < chkMap.size()) {
											Map<String, Object> param = new HashMap<String, Object>();
											param.put("userId", chkMap.get("user_id"));
											param.put("userToken", chkMap.get("user_token"));
											param.put("no", chkMap.get("no"));
											param.put("releaseYn", "Y");
											param.put("sensorUuid", chkMap.get("sensor_uuid"));

											try {
												adminService.updateNoti(param);
											} catch(Exception e) {
												logger.error("Error : " + e.toString());
												e.printStackTrace();
											}
										}

										if(null != chkMap2 && 0 < chkMap2.size()) {
											Map<String, Object> param = new HashMap<String, Object>();
											param.put("userId", String.valueOf(reqMap.get("userId")));
											param.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
											param.put("alarmType", "specific");

											try {
												adminService.updateUrgentNoti(param);
											} catch(Exception e) {
												logger.error("Error : " + e.toString());
											}
										}

										notiMap.remove("alarmType");
										notiMap.put("alarmType", "respecific");

										chkMap = new HashMap<String, Object>();
										chkMap = adminService.selectNoti(notiMap);

										// 이미 알람이 들어있는지 확인 후 없으면 입력
										if (null != chkMap && 0 < chkMap.size()) {
											Map<String, Object> param = new HashMap<String, Object>();
											param.put("userId", chkMap.get("user_id"));
											param.put("userToken", chkMap.get("user_token"));
											param.put("no", chkMap.get("no"));
											param.put("releaseYn", "Y");
											param.put("sensorUuid", chkMap.get("sensor_uuid"));

											try {
												adminService.updateNoti(param);
											} catch(Exception e) {
												logger.error("Error : " + e.toString());
												e.printStackTrace();
											}
										}
									}
								}
							}
						}
					}
				} else if("din".equals(in_name)) {
					if (null != diAlarmYn && !"".equals(diAlarmYn)) {
						if (null != in_name && !"".equals(in_name)) {
							if ("din".equals(in_name) && "1".equals(String.valueOf(reqMap.get("type"))) && "1".equals(String.valueOf(reqMap.get("sensorValue")))) {
								if ("Y".equals(diAlarmYn)) {
									if (!"0".equals(diAlarmTime)) {
										Map<String, Object> notiMap = new HashMap<String, Object>();
										notiMap.put("userId", String.valueOf(reqMap.get("userId")));
										notiMap.put("userToken", String.valueOf(reqMap.get("token")));
										notiMap.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
										notiMap.put("addTime", diAlarmTime);
										notiMap.put("alarmType", "di1");
										notiMap.put("inTemp", curTemp);
										notiMap.put("urgentYn", "Y");

										Map<String, Object> chkMap = new HashMap<String, Object>();
										chkMap = adminService.selectChkNoti(notiMap);

										// 이미 알람이 들어있는지 확인 후 없으면 입력
										if (null != chkMap && 0 < chkMap.size()) {
										} else {
											adminService.insertNoti(notiMap);
										}
									} else {
										Map<String, Object> chkUrgent = new HashMap<String, Object>();
										Map<String, Object> chkRelease = new HashMap<String, Object>();
										Map<String, Object> chkMap = new HashMap<String, Object>();
										boolean urgentYn = false;
										boolean releaseYn = false;
										boolean existYn = false;
										chkMap.put("userId", String.valueOf(reqMap.get("userId")));
										chkMap.put("userToken", String.valueOf(reqMap.get("token")));
										chkMap.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
										chkMap.put("alarmType", "di");
										chkMap.put("reDelayTime", diAlarmDelayTime);

										chkUrgent = adminService.selectUrgentNoti(chkMap);
										if(null != chkUrgent && 0 < chkUrgent.size()) {
											int urgentCnt = 0;
											urgentCnt = Integer.parseInt(String.valueOf(chkUrgent.get("cnt")));

											if(0 < urgentCnt) {
												urgentYn = true;
											}
										}

										chkRelease = adminService.selectReleaseNoti(chkMap);
										if(null != chkRelease && 0 < chkRelease.size()) {
											int releaseCnt = 0;
											releaseCnt = Integer.parseInt(String.valueOf(chkRelease.get("cnt")));

											if(0 < releaseCnt) {
												releaseYn = true;
											}
										}

										Map<String, Object> notiMap = new HashMap<String, Object>();
										notiMap.put("userId", String.valueOf(reqMap.get("userId")));
										notiMap.put("userToken", String.valueOf(reqMap.get("token")));
										notiMap.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
										notiMap.put("addTime", diAlarmTime);
										notiMap.put("alarmType", "di2");
										notiMap.put("inTemp", String.valueOf(reqMap.get("sensorValue")));
										notiMap.put("curTemp", highTemp);

										Map<String, Object> chk = new HashMap<String, Object>();
										chk = adminService.selectNoti(notiMap);

										if(null != chk && 0 < chk.size()) {
											existYn = true;
										}

										if(!urgentYn || releaseYn) {
											Map<String, Object> noti = new HashMap<String, Object>();
											noti.put("token", String.valueOf(reqMap.get("token")));
											noti.put("sensor_uuid", sensorName);
											noti.put("type", "DI알람");
											noti.put("inType", "di");
											noti.put("gu", "din");
											noti.put("inTemp", curTemp);
											sendNoti(noti);

											// DB에 즉시 발송 이력 저장
											Map<String, Object> urgent = new HashMap<String, Object>();
											urgent.put("userId", String.valueOf(reqMap.get("userId")));
											urgent.put("userToken", String.valueOf(reqMap.get("token")));
											urgent.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
											urgent.put("addTime", diAlarmTime);
											urgent.put("alarmType", "di");
											urgent.put("inTemp", String.valueOf(reqMap.get("sensorValue")));
											urgent.put("curTemp", highTemp);
											urgent.put("urgentYn", "Y");

											adminService.insertUrgentNoti(urgent);
										}
									}

									if (!"0".equals(diAlarmDelayTime)) {
										Map<String, Object> notiMap = new HashMap<String, Object>();
										notiMap.put("userId", String.valueOf(reqMap.get("userId")));
										notiMap.put("userToken", String.valueOf(reqMap.get("token")));
										notiMap.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
										notiMap.put("addTime", Integer.parseInt(diAlarmTime) + Integer.parseInt(diAlarmDelayTime));
										notiMap.put("alarmType", "di2");
										notiMap.put("inTemp", curTemp);
										notiMap.put("urgentYn", "N");

										Map<String, Object> chkMap = new HashMap<String, Object>();
										chkMap = adminService.selectNoti(notiMap);

										// 이미 알람이 들어있는지 확인 후 없으면 입력
										if (null != chkMap && 0 < chkMap.size()) {
										} else {
											adminService.insertNoti(notiMap);
										}
									}
								}
							} else {
								Map<String, Object> notiMap = new HashMap<String, Object>();
								notiMap.put("userId", String.valueOf(reqMap.get("userId")));
								notiMap.put("userToken", String.valueOf(reqMap.get("token")));
								notiMap.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
								notiMap.put("addTime", diAlarmTime);
								notiMap.put("alarmType", "di1");
								notiMap.put("inTemp", curTemp);

								Map<String, Object> chkMap = new HashMap<String, Object>();
								chkMap = adminService.selectNoti(notiMap);

								// 이미 알람이 들어있는지 확인 후 없으면 입력
								if (null != chkMap && 0 < chkMap.size()) {
									Map<String, Object> param = new HashMap<String, Object>();
									param.put("userId", chkMap.get("user_id"));
									param.put("userToken", chkMap.get("user_token"));
									param.put("no", chkMap.get("no"));
									param.put("sensorUuid", chkMap.get("sensor_uuid"));

									try {
										adminService.updateNoti(param);
									} catch(Exception e) {
										logger.error("Error : " + e.toString());
										e.printStackTrace();
									}
								}

								notiMap.remove("alarmType");
								notiMap.put("alarmType", "di2");

								chkMap = new HashMap<String, Object>();
								chkMap = adminService.selectNoti(notiMap);

								if(null != chkMap && 0 < chkMap.size()) {
									Map<String, Object> param = new HashMap<String, Object>();
									param.put("userId", chkMap.get("user_id"));
									param.put("userToken", chkMap.get("user_token"));
									param.put("no", chkMap.get("no"));
									param.put("sensorUuid", chkMap.get("sensor_uuid"));

									try {
										adminService.updateNoti(param);
									} catch(Exception e) {
										logger.error("Error : " + e.toString());
										e.printStackTrace();
									}
								}
							}
						}
					}
				} else if("output".equals(in_name)) {

				} else if("error".equals(in_name)) {
					if(null != networkAlarmYn && !"".equals(networkAlarmYn)) {
						if("Y".equals(networkAlarmYn)) {
							if(!"0".equals(networkAlarmTime)) {
								logger.info("1. error 1 - network alarm time : " + networkAlarmTime);
								Map<String, Object> notiMap = new HashMap<String, Object>();
								notiMap.put("userId", String.valueOf(reqMap.get("userId")));
								notiMap.put("userToken", String.valueOf(reqMap.get("token")));
								notiMap.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
								notiMap.put("addTime", networkAlarmTime);
								notiMap.put("alarmType", "netError1");
								notiMap.put("inTemp", curTemp);
								notiMap.put("urgentYn", "Y");

								Map<String, Object> chkMap = new HashMap<String, Object>();
								chkMap = adminService.selectChkNoti(notiMap);

								// 이미 알람이 들어있는지 확인 후 없으면 입력
								if (null != chkMap && 0 < chkMap.size()) {
								} else {
									adminService.insertNoti(notiMap);
								}
							} else {
								logger.info("2. error 2 - network alarm time : " + networkAlarmTime);
								Map<String, Object> chkUrgent = new HashMap<String, Object>();
								Map<String, Object> chkRelease = new HashMap<String, Object>();
								Map<String, Object> chkMap = new HashMap<String, Object>();
								boolean urgentYn = false;
								boolean releaseYn = false;
								boolean existYn = false;
								chkMap.put("userId", String.valueOf(reqMap.get("userId")));
								chkMap.put("userToken", String.valueOf(reqMap.get("token")));
								chkMap.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
								chkMap.put("alarmType", "netError");
								chkMap.put("reDelayTime", networkDelayTime);

								chkUrgent = adminService.selectUrgentNoti(chkMap);
								if(null != chkUrgent && 0 < chkUrgent.size()) {
									int urgentCnt = 0;
									urgentCnt = Integer.parseInt(String.valueOf(chkUrgent.get("cnt")));

									if(0 < urgentCnt) {
										urgentYn = true;
									}
								}

								// 해제 되었다 다시 오류가 인입된 경우에는 발송 처리 추가
								chkRelease = adminService.selectReleaseNoti(chkMap);
								if(null != chkRelease && 0 < chkRelease.size()) {
									int releaseCnt = 0;
									releaseCnt = Integer.parseInt(String.valueOf(chkRelease.get("cnt")));

									if(0 < releaseCnt) {
										releaseYn = true;
									}
								}

								Map<String, Object> notiMap = new HashMap<String, Object>();
								notiMap.put("userId", String.valueOf(reqMap.get("userId")));
								notiMap.put("userToken", String.valueOf(reqMap.get("token")));
								notiMap.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
								notiMap.put("addTime", networkAlarmTime);
								notiMap.put("alarmType", "netError2");
								notiMap.put("inTemp", String.valueOf(reqMap.get("sensorValue")));
								notiMap.put("curTemp", highTemp);

								Map<String, Object> chk = new HashMap<String, Object>();
								chk = adminService.selectNoti(notiMap);

								if(null != chk && 0 < chk.size()) {
									existYn = true;
								}

								if(!urgentYn || releaseYn) {
									Map<String, Object> noti = new HashMap<String, Object>();
									noti.put("token", String.valueOf(reqMap.get("token")));
									noti.put("sensor_uuid", sensorName);
									noti.put("type", "통신에러");
									noti.put("gu", "netError");
									noti.put("inTemp", curTemp);
									sendNoti(noti);

									Map<String, Object> urgent = new HashMap<String, Object>();
									urgent.put("userId", String.valueOf(reqMap.get("userId")));
									urgent.put("userToken", String.valueOf(reqMap.get("token")));
									urgent.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
									urgent.put("addTime", networkAlarmTime);
									urgent.put("alarmType", "netError");
									urgent.put("inTemp", String.valueOf(reqMap.get("sensorValue")));
									urgent.put("curTemp", highTemp);
									urgent.put("urgentYn", "Y");

									adminService.insertUrgentNoti(urgent);
								}
							}

							if(!"0".equals(networkDelayTime)) {
								Map<String, Object> notiMap = new HashMap<String, Object>();
								notiMap.put("userId", String.valueOf(reqMap.get("userId")));
								notiMap.put("userToken", String.valueOf(reqMap.get("token")));
								notiMap.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
								notiMap.put("addTime", Integer.parseInt(networkAlarmTime) + Integer.parseInt(networkDelayTime));
								notiMap.put("alarmType", "netError2");
								notiMap.put("inTemp", curTemp);
								notiMap.put("urgentYn", "N");

								Map<String, Object> chkMap = new HashMap<String, Object>();
								chkMap = adminService.selectNoti(notiMap);

								// 이미 알람이 들어있는지 확인 후 없으면 입력
								if (null != chkMap && 0 < chkMap.size()) {
								} else {
									adminService.insertNoti(notiMap);
								}
							}
						}
					}
				} else if("error_release".equals(in_name)) {
					Map<String, Object> notiMap = new HashMap<String, Object>();
					notiMap.put("userId", String.valueOf(reqMap.get("userId")));
					notiMap.put("userToken", String.valueOf(reqMap.get("token")));
					notiMap.put("sensorUuid", String.valueOf(reqMap.get("sensorUuid")));
					notiMap.put("addTime", networkAlarmTime);
					notiMap.put("alarmType", "netError1");
					notiMap.put("inTemp", curTemp);

					Map<String, Object> chkMap = new HashMap<String, Object>();
					chkMap = adminService.selectNoti(notiMap);

					// 이미 알람이 들어있는지 확인 후 없으면 입력
					if (null != chkMap && 0 < chkMap.size()) {
						Map<String, Object> param = new HashMap<String, Object>();
						param.put("userId", chkMap.get("user_id"));
						param.put("userToken", chkMap.get("user_token"));
						param.put("no", chkMap.get("no"));
						param.put("sensorUuid", chkMap.get("sensor_uuid"));

						try {
							adminService.updateNoti(param);
						} catch(Exception e) {
							logger.error("Error : " + e.toString());
							e.printStackTrace();
						}
					}

					notiMap.remove("alarmType");
					notiMap.put("alarmType", "netError2");

					chkMap = new HashMap<String, Object>();
					chkMap = adminService.selectNoti(notiMap);

					if(null != chkMap && 0 < chkMap.size()) {
						Map<String, Object> param = new HashMap<String, Object>();
						param.put("userId", chkMap.get("user_id"));
						param.put("userToken", chkMap.get("user_token"));
						param.put("no", chkMap.get("no"));
						param.put("sensorUuid", chkMap.get("sensor_uuid"));

						try {
							adminService.updateNoti(param);
						} catch(Exception e) {
							logger.error("Error : " + e.toString());
							e.printStackTrace();
						}
					}
				}

				resultMap.put("resultCode", "200");
			}
		}

		return resultMap;
	}

	@RequestMapping(value = "/updateFocusStatus", method = RequestMethod.POST)
	public @ResponseBody Map<String, Object> updateFocusStatus(
			HttpServletRequest req
			, HttpServletResponse res
			, @RequestBody Map<String, Object> reqMap
	) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		
		try {
			// 포커스 상태 업데이트 로직
			// 현재는 단순히 성공 응답만 반환
			resultMap.put("resultCode", "200");
			resultMap.put("resultMessage", "포커스 상태 업데이트 성공");
		} catch (Exception e) {
			resultMap.put("resultCode", "500");
			resultMap.put("resultMessage", "포커스 상태 업데이트 실패: " + e.getMessage());
		}
		
		return resultMap;
	}

}
