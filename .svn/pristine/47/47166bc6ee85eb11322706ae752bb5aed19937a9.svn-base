package com.andrew.hnt.api.controller;

import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.ui.Model;

import com.andrew.hnt.api.model.UserInfo;
import com.andrew.hnt.api.service.LoginService;
import com.andrew.hnt.api.model.LoginVO;

@Component
public class CommonController {
    
    private Logger logger = LoggerFactory.getLogger(this.getClass());
    
    @Autowired
    private LoginService loginService;
    
    /**
     * 사이드바 데이터를 위한 공통 메서드
     * 각 페이지에서 호출하여 사용자 정보를 Model에 추가
     * 세션 정보를 우선적으로 사용하고, DB 조회는 보완적으로 사용
     */
    public void addSidebarData(String userId, Model model, HttpSession session) {
        try {
            if (userId != null && !userId.isEmpty()) {
                // 세션에서 사용자 정보 우선 확인
                String sessionUserNm = (String) session.getAttribute("userNm");
                String sessionUserGrade = (String) session.getAttribute("userGrade");
                // 세션 최소화: 이메일/전화번호는 세션에서 읽지 않음
                
                // 세션에 사용자 정보가 있으면 우선 사용
                if (sessionUserNm != null && !sessionUserNm.isEmpty()) {
                    // chart/data 등에서 선행 설정한 sensorId가 있으면 덮어쓰지 않음
                    if (!model.containsAttribute("sensorId")) {
                        model.addAttribute("sensorId", userId);
                    }
                    
                    logger.info("세션에서 사용자 정보 사용 - userId: {}, userNm: {}, userGrade: {}", 
                               userId, sessionUserNm, sessionUserGrade);
                } else {
                    // 세션에 없으면 DB에서 사용자 정보 조회
                    UserInfo userInfo = loginService.getUserInfoByUserId(userId);
                    if (userInfo != null) {
                        if (!model.containsAttribute("sensorId")) {
                            model.addAttribute("sensorId", userInfo.getUserId()); // 기본값
                        }
                        
                        logger.info("DB에서 사용자 정보 조회 성공 - userId: {}, userNm: {}, userGrade: {}", 
                                   userInfo.getUserId(), userInfo.getUserNm(), userInfo.getUserGrade());
                    } else {
                        // 사용자 정보가 없을 경우 기본값 설정
                        if (!model.containsAttribute("sensorId")) {
                            model.addAttribute("sensorId", userId);
                        }
                        
                        logger.warn("사용자 정보를 찾을 수 없음 - userId: {}", userId);
                    }
                }
            } else {
                // userId가 없을 경우 기본값 설정
                model.addAttribute("userNm", "사용자");
                model.addAttribute("userId", "");
                model.addAttribute("userGrade", "B");
                model.addAttribute("userEmail", "");
                model.addAttribute("userTel", "");
                if (!model.containsAttribute("sensorId")) {
                    model.addAttribute("sensorId", "");
                }
                
                logger.warn("userId가 제공되지 않음");
            }
        } catch (Exception e) {
            // 에러 발생 시 기본값 설정
            model.addAttribute("userNm", "사용자");
            model.addAttribute("userId", userId);
            model.addAttribute("userGrade", "B");
            model.addAttribute("userEmail", "");
            model.addAttribute("userTel", "");
            if (!model.containsAttribute("sensorId")) {
                model.addAttribute("sensorId", userId);
            }
            
            logger.error("사용자 정보 조회 중 오류 발생 - userId: {}, error: {}", userId, e.getMessage(), e);
        }
    }

	/**
	 * 세션 만료 시 자동 로그아웃 처리
	 */
	public void handleSessionExpiration(String userId) {
		try {
			if (userId != null && !userId.isEmpty()) {
				LoginVO loginVO = new LoginVO();
				loginVO.setUserId(userId);
				loginService.updateLogoutDtm(loginVO);
				logger.info("세션 만료로 인한 자동 로그아웃 처리 완료 - userId: {}", userId);
			}
		} catch (Exception e) {
			logger.error("세션 만료 시 로그아웃 처리 실패 - userId: {}, error: {}", userId, e.getMessage());
		}
	}
} 