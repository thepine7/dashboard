<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.andrew.hnt.api.mapper.MqttMapper">

    <!-- 최적화된 센서 값 조회 - 공통 SQL 적용 -->
    <select id="getSensorValue" parameterType="java.util.HashMap" resultType="com.andrew.hnt.api.model.SensorVO">
        select
            <include refid="com.andrew.hnt.api.mapper.CommonSql.sensorDataBasicColumns" />
        from hnt_sensor_data
        where <include refid="com.andrew.hnt.api.mapper.CommonSql.uuidCondition" />
        <include refid="com.andrew.hnt.api.mapper.CommonSql.orderByLatest" />
        limit 1
    </select>

    <!-- 최적화된 사용자 정보 조회 -->
    <select id="getUserInfoForMqtt" parameterType="com.andrew.hnt.api.model.LoginVO" resultType="com.andrew.hnt.api.model.UserInfo">
        select
            no
            , user_nm as userNm
            , user_tel as userTel
            , user_email as userEmail
            , user_id as userId
            , user_pass as userPass
            , user_grade as userGrade
            , use_yn as useYn
            , del_yn as delYn
            , token as token
        from hnt_user
        where del_yn = 'N'
        and user_id = #{userId}
        <if test="userPass != null and userPass != ''">
            and user_pass = #{userPass}
        </if>
    </select>

    <!-- 최적화된 설정 조회 -->
    <select id="selectSetting" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        select
            user_id
            , sensor_id
            , sensor_uuid
            , topic
            , alarm_yn1
            , alarm_yn2
            , alarm_yn3
            , alarm_yn4
            , alarm_yn5
            , set_val1
            , set_val2
            , set_val3
            , set_val4
            , delay_time1
            , delay_time2
            , delay_time3
            , delay_time4
            , delay_time5
            , re_delay_time1
            , re_delay_time2
            , re_delay_time3
            , re_delay_time4
            , re_delay_time5
        from hnt_config
        where sensor_id = #{sensorId}
        and sensor_uuid = #{sensorUuid}
    </select>

    <!-- 최적화된 센서 데이터 삽입 -->
    <insert id="insertSensorData" parameterType="com.andrew.hnt.api.model.SensorVO">
        insert into hnt_sensor_data
        (user_id, sensor_id, uuid, sensor_type, sensor_value, topic, raw_data, inst_id, inst_dtm, mdf_id, mdf_dtm)
        values
        (#{userId}, #{sensorId}, #{uuid}, #{sensorType}, #{sensorValue}, #{topic}, #{rawData}, #{instId}, now(), #{mdfId}, now())
    </insert>

    <!-- 배치 삽입 - 대용량 데이터 처리용 -->
    <insert id="insertSensorDataBatch" parameterType="java.util.List">
        insert into hnt_sensor_data
        (user_id, sensor_id, uuid, sensor_type, sensor_value, topic, raw_data, inst_id, inst_dtm, mdf_id, mdf_dtm)
        values
        <foreach collection="list" item="item" separator=",">
            (#{item.userId}, #{item.sensorId}, #{item.uuid}, #{item.sensorType}, #{item.sensorValue}, #{item.topic}, #{item.rawData}, #{item.instId}, now(), #{item.mdfId}, now())
        </foreach>
    </insert>

    <!-- 대량 삭제 최적화 -->
    <delete id="deleteSensorDataBatch" parameterType="java.util.HashMap">
        delete from hnt_sensor_data
        where uuid = #{sensorUuid}
        and inst_dtm &lt; #{cutoffDate}
        limit #{batchSize}
    </delete>

    <!-- 최적화된 센서 정보 조회 -->
    <select id="getSensorInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        select count(*) as cnt
        from hnt_sensor_info
        where user_id = #{userId}
        and sensor_uuid = #{sensorUuid}
    </select>
    
    <!-- 장치 이름 변경 -->
    <update id="updateSensorNameDirect" parameterType="java.util.HashMap">
        UPDATE hnt_sensor_info 
        SET sensor_name = #{sensorName},
            mdf_id = #{mdfId},
            mdf_dtm = NOW()
        WHERE user_id = #{userId} 
          AND sensor_uuid = #{sensorUuid}
    </update>
    
    <insert id="insertSensorInfo" parameterType="java.util.HashMap">
        insert into hnt_sensor_info
        (user_id, sensor_id, sensor_uuid, sensor_name, sensor_type, chart_type, inst_id, inst_dtm, mdf_id, mdf_dtm)
        values
        (#{userId}, #{sensorId}, #{sensorUuid}, #{sensorUuid}, #{sensorType}, 'none', #{instId}, now(), #{mdfId}, now())
    </insert>

    <insert id="insertDefaultConfig" parameterType="java.util.HashMap">
        insert into hnt_config
        (user_id, sensor_id, sensor_uuid, topic, alarm_yn1, alarm_yn2, alarm_yn3, alarm_yn4, alarm_yn5, set_val1, set_val2, set_val3, set_val4, delay_time1, delay_time2, delay_time3, delay_time4, delay_time5, re_delay_time1, re_delay_time2, re_delay_time3, re_delay_time4, re_delay_time5, inst_id, inst_dtm, mdf_id, mdf_dtm)
        values
        (#{userId}, #{sensorId}, #{sensorUuid}, #{topic}, 'N', 'N', 'N', 'N', 'N', '25.0', '5.0', '0.0', '0.0', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'hnt', now(), 'hnt', now())
    </insert>

    <!-- 최적화된 알림 조회 -->
    <select id="selectNoti" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        select
            no
            , user_token
            , user_id
            , sensor_uuid
            , alarm_time
        from hnt_alarm
        where user_id = #{userId}
        and user_token = #{userToken}
        and sensor_uuid = #{sensorUuid}
        and alarm_type = #{alarmType}
    </select>

    <insert id="insertNoti" parameterType="java.util.HashMap">
        insert into hnt_alarm
        (user_id, user_token, sensor_uuid, alarm_time, inst_id, inst_dtm, mdf_id, mdf_dtm, use_yn, alarm_type)
        values
        (#{userId}, #{userToken}, #{sensorUuid}, date_add(now(), interval #{addTime} minute), 'hnt', now(), 'hnt', now(), 'Y', #{alarmType});
    </insert>

    <!-- 장치 전송 기능을 위한 쿼리들 -->
    
    <!-- 장치 전역 중복 체크 (이전 소유자 확인) -->
    <select id="getSensorInfoByUuid" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        select user_id, sensor_id, sensor_uuid, sensor_name, sensor_type, chart_type
        from hnt_sensor_info
        where sensor_uuid = #{sensorUuid}
        limit 1
    </select>
    
    <!-- 기존 사용자의 장치 정보 삭제 (이전 처리) -->
    <delete id="deleteSensorInfoByUuid" parameterType="java.util.HashMap">
        delete from hnt_sensor_info where sensor_uuid = #{sensorUuid}
    </delete>
    
    <!-- 기존 사용자의 장치 설정 정보 삭제 (이전 처리) -->
    <delete id="deleteConfigByUuid" parameterType="java.util.HashMap">
        delete from hnt_config where sensor_uuid = #{sensorUuid}
    </delete>
    
    <!-- 기존 사용자의 센서 데이터 삭제 (이전 처리) -->
    <delete id="deleteSensorDataByUuid" parameterType="java.util.HashMap">
        delete from hnt_sensor_data where uuid = #{sensorUuid}
    </delete>
    
    <!-- 기존 사용자의 알림 데이터 삭제 (이전 처리) -->
    <delete id="deleteAlarmByUuid" parameterType="java.util.HashMap">
        delete from hnt_alarm where sensor_uuid = #{sensorUuid}
    </delete>

</mapper>