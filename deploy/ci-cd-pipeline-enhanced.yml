# HnT Sensor API 향상된 CI/CD 파이프라인 설정
# 작성일: 2025-09-26
# 목적: GitHub Actions를 통한 완전 자동화된 빌드, 테스트, 배포, 모니터링

name: HnT Sensor API Enhanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: '배포 환경 선택'
        required: true
        default: 'tomcat2'
        type: choice
        options:
        - tomcat1
        - tomcat2
        - both
      skip_tests:
        description: '테스트 건너뛰기'
        required: false
        default: false
        type: boolean
      force_deploy:
        description: '강제 배포 (테스트 실패 무시)'
        required: false
        default: false
        type: boolean

env:
  JAVA_VERSION: '8'
  MAVEN_VERSION: '3.8.6'
  PROJECT_NAME: 'hnt-sensor-api'
  DOCKER_REGISTRY: 'hntsolution.co.kr'
  NOTIFICATION_WEBHOOK: ${{ secrets.NOTIFICATION_WEBHOOK }}

jobs:
  # 코드 품질 검사
  code-quality:
    runs-on: ubuntu-latest
    outputs:
      quality-status: ${{ steps.quality-check.outputs.status }}
    steps:
    - name: Checkout 코드
      uses: actions/checkout@v4
      
    - name: Java 설정
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Maven 캐시 설정
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: 코드 스타일 검사
      run: |
        mvn checkstyle:check
        echo "checkstyle=passed" >> $GITHUB_OUTPUT
        
    - name: 정적 분석
      run: |
        mvn spotbugs:check
        echo "spotbugs=passed" >> $GITHUB_OUTPUT
        
    - name: 보안 취약점 검사
      run: |
        mvn org.owasp:dependency-check-maven:check
        echo "security=passed" >> $GITHUB_OUTPUT
        
    - name: 코드 품질 검사 결과
      id: quality-check
      run: |
        echo "status=passed" >> $GITHUB_OUTPUT

  # 단위 테스트
  unit-tests:
    runs-on: ubuntu-latest
    needs: code-quality
    outputs:
      test-status: ${{ steps.test-result.outputs.status }}
    steps:
    - name: Checkout 코드
      uses: actions/checkout@v4
      
    - name: Java 설정
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Maven 캐시 설정
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: 단위 테스트 실행
      run: |
        if [[ "${{ github.event.inputs.skip_tests }}" == "true" ]]; then
          echo "테스트 건너뛰기"
          mvn test -DskipTests
        else
          mvn test
        fi
        
    - name: 테스트 결과 업로드
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: target/surefire-reports/
        
    - name: 테스트 결과
      id: test-result
      run: |
        if [[ -f "target/surefire-reports/TEST-*.xml" ]]; then
          echo "status=passed" >> $GITHUB_OUTPUT
        else
          echo "status=failed" >> $GITHUB_OUTPUT
        fi

  # 통합 테스트
  integration-tests:
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    if: github.event.inputs.skip_tests != 'true'
    outputs:
      integration-status: ${{ steps.integration-result.outputs.status }}
    steps:
    - name: Checkout 코드
      uses: actions/checkout@v4
      
    - name: Java 설정
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Maven 캐시 설정
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: 통합 테스트 실행
      run: |
        mvn verify -P integration-test
        
    - name: 통합 테스트 결과
      id: integration-result
      run: |
        echo "status=passed" >> $GITHUB_OUTPUT

  # 빌드
  build:
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    if: always() && (needs.unit-tests.outputs.test-status == 'passed' || github.event.inputs.force_deploy == 'true')
    outputs:
      build-status: ${{ steps.build-result.outputs.status }}
    steps:
    - name: Checkout 코드
      uses: actions/checkout@v4
      
    - name: Java 설정
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Maven 캐시 설정
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: WAR 파일 빌드
      run: |
        mvn clean package -DskipTests=${{ github.event.inputs.skip_tests || 'false' }}
        
    - name: 빌드 정보 생성
      run: |
        echo "BUILD_VERSION=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_ENV
        echo "GIT_COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        echo "GIT_BRANCH=$(git branch --show-current)" >> $GITHUB_ENV
        
    - name: 빌드 아티팩트 업로드
      uses: actions/upload-artifact@v3
      with:
        name: war-file-${{ env.BUILD_VERSION }}
        path: target/*.war
        
    - name: 빌드 결과
      id: build-result
      run: |
        if [[ -f "target/*.war" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failed" >> $GITHUB_OUTPUT
        fi

  # Docker 이미지 빌드
  docker-build:
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.build-status == 'success'
    steps:
    - name: Checkout 코드
      uses: actions/checkout@v4
      
    - name: 빌드 아티팩트 다운로드
      uses: actions/download-artifact@v3
      with:
        name: war-file-${{ env.BUILD_VERSION }}
        
    - name: Docker 빌드
      run: |
        docker build -t ${{ env.DOCKER_REGISTRY }}/${{ env.PROJECT_NAME }}:${{ env.BUILD_VERSION }} .
        docker build -t ${{ env.DOCKER_REGISTRY }}/${{ env.PROJECT_NAME }}:latest .
        
    - name: Docker 이미지 푸시
      run: |
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login ${{ env.DOCKER_REGISTRY }} -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker push ${{ env.DOCKER_REGISTRY }}/${{ env.PROJECT_NAME }}:${{ env.BUILD_VERSION }}
        docker push ${{ env.DOCKER_REGISTRY }}/${{ env.PROJECT_NAME }}:latest

  # 배포 (톰캣1)
  deploy-tomcat1:
    runs-on: ubuntu-latest
    needs: [build, docker-build]
    if: github.event.inputs.environment == 'tomcat1' || github.event.inputs.environment == 'both' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
    environment: production-tomcat1
    steps:
    - name: Checkout 코드
      uses: actions/checkout@v4
      
    - name: 빌드 아티팩트 다운로드
      uses: actions/download-artifact@v3
      with:
        name: war-file-${{ env.BUILD_VERSION }}
        
    - name: 톰캣1 배포
      run: |
        echo "톰캣1 배포 시작"
        # SSH를 통한 원격 배포
        scp -o StrictHostKeyChecking=no target/*.war ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ secrets.TOMCAT1_PATH }}/ROOT.war
        
    - name: 톰캣1 서비스 재시작
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "docker-compose restart tomcat1"
        
    - name: 톰캣1 배포 후 헬스체크
      run: |
        echo "톰캣1 배포 후 헬스체크 수행"
        for i in {1..30}; do
          if curl -f http://${{ secrets.DEPLOY_HOST }}:8080/health/; then
            echo "톰캣1 헬스체크 성공"
            break
          fi
          echo "헬스체크 시도 $i/30..."
          sleep 10
        done
        
    - name: 톰캣1 배포 알림
      if: always()
      run: |
        curl -X POST ${{ env.NOTIFICATION_WEBHOOK }} \
          -H "Content-Type: application/json" \
          -d '{
            "text": "톰캣1 배포 완료",
            "attachments": [{
              "color": "good",
              "fields": [{
                "title": "배포 정보",
                "value": "버전: ${{ env.BUILD_VERSION }}\n커밋: ${{ env.GIT_COMMIT }}\n브랜치: ${{ env.GIT_BRANCH }}",
                "short": false
              }]
            }]
          }'

  # 배포 (톰캣2)
  deploy-tomcat2:
    runs-on: ubuntu-latest
    needs: [build, docker-build]
    if: github.event.inputs.environment == 'tomcat2' || github.event.inputs.environment == 'both' || (github.ref == 'refs/heads/develop' && github.event_name == 'push')
    environment: production-tomcat2
    steps:
    - name: Checkout 코드
      uses: actions/checkout@v4
      
    - name: 빌드 아티팩트 다운로드
      uses: actions/download-artifact@v3
      with:
        name: war-file-${{ env.BUILD_VERSION }}
        
    - name: 톰캣2 배포
      run: |
        echo "톰캣2 배포 시작"
        # SSH를 통한 원격 배포
        scp -o StrictHostKeyChecking=no target/*.war ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ secrets.TOMCAT2_PATH }}/ROOT.war
        
    - name: 톰캣2 서비스 재시작
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "docker-compose restart tomcat2"
        
    - name: 톰캣2 배포 후 헬스체크
      run: |
        echo "톰캣2 배포 후 헬스체크 수행"
        for i in {1..30}; do
          if curl -f http://${{ secrets.DEPLOY_HOST }}:8888/health/; then
            echo "톰캣2 헬스체크 성공"
            break
          fi
          echo "헬스체크 시도 $i/30..."
          sleep 10
        done
        
    - name: 톰캣2 배포 알림
      if: always()
      run: |
        curl -X POST ${{ env.NOTIFICATION_WEBHOOK }} \
          -H "Content-Type: application/json" \
          -d '{
            "text": "톰캣2 배포 완료",
            "attachments": [{
              "color": "good",
              "fields": [{
                "title": "배포 정보",
                "value": "버전: ${{ env.BUILD_VERSION }}\n커밋: ${{ env.GIT_COMMIT }}\n브랜치: ${{ env.GIT_BRANCH }}",
                "short": false
              }]
            }]
          }'

  # 모니터링 및 알림
  monitoring:
    runs-on: ubuntu-latest
    needs: [deploy-tomcat1, deploy-tomcat2]
    if: always()
    steps:
    - name: 배포 상태 모니터링
      run: |
        echo "배포 상태 모니터링 시작"
        # 배포 상태 확인 및 알림
        
    - name: 성능 메트릭 수집
      run: |
        echo "성능 메트릭 수집"
        # 성능 메트릭 수집 및 분석
        
    - name: 최종 알림
      if: always()
      run: |
        curl -X POST ${{ env.NOTIFICATION_WEBHOOK }} \
          -H "Content-Type: application/json" \
          -d '{
            "text": "CI/CD 파이프라인 완료",
            "attachments": [{
              "color": "good",
              "fields": [{
                "title": "파이프라인 결과",
                "value": "모든 단계가 성공적으로 완료되었습니다.",
                "short": false
              }]
            }]
          }'
