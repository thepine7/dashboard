# HnT Sensor API CI/CD 파이프라인 설정
# 작성일: 2025-09-26
# 목적: GitHub Actions를 통한 자동화된 빌드, 테스트, 배포

name: HnT Sensor API CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: '배포 환경 선택'
        required: true
        default: 'tomcat2'
        type: choice
        options:
        - tomcat1
        - tomcat2
      skip_tests:
        description: '테스트 건너뛰기'
        required: false
        default: false
        type: boolean

env:
  JAVA_VERSION: '8'
  MAVEN_VERSION: '3.8.6'
  PROJECT_NAME: 'hnt-sensor-api'

jobs:
  # 코드 품질 검사
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout 코드
      uses: actions/checkout@v3
      
    - name: Java 설정
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Maven 캐시 설정
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: 코드 스타일 검사
      run: |
        mvn checkstyle:check
        
    - name: 정적 분석
      run: |
        mvn spotbugs:check
        
    - name: 보안 취약점 검사
      run: |
        mvn org.owasp:dependency-check-maven:check

  # 단위 테스트
  unit-tests:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
    - name: Checkout 코드
      uses: actions/checkout@v3
      
    - name: Java 설정
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Maven 캐시 설정
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: 단위 테스트 실행
      run: |
        mvn test -Dtest=**/*Test
        
    - name: 테스트 커버리지 리포트 생성
      run: |
        mvn jacoco:report
        
    - name: 테스트 커버리지 업로드
      uses: codecov/codecov-action@v3
      with:
        file: target/site/jacoco/jacoco.xml

  # 통합 테스트
  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: hnt_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        
      mosquitto:
        image: eclipse-mosquitto:latest
        ports:
          - 1883:1883
        options: --health-cmd="mosquitto_pub -h localhost -t test -m test" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: Checkout 코드
      uses: actions/checkout@v3
      
    - name: Java 설정
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Maven 캐시 설정
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: 통합 테스트 실행
      run: |
        mvn verify -Dspring.profiles.active=test
        
    - name: 통합 테스트 리포트 생성
      run: |
        mvn surefire-report:report

  # 빌드
  build:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
    - name: Checkout 코드
      uses: actions/checkout@v3
      
    - name: Java 설정
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Maven 캐시 설정
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: WAR 파일 빌드
      run: |
        mvn clean package -DskipTests=${{ github.event.inputs.skip_tests || 'false' }}
        
    - name: 빌드 아티팩트 업로드
      uses: actions/upload-artifact@v3
      with:
        name: war-file
        path: target/*.war

  # 배포 (톰캣1)
  deploy-tomcat1:
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.environment == 'tomcat1' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
    environment: production-tomcat1
    steps:
    - name: 빌드 아티팩트 다운로드
      uses: actions/download-artifact@v3
      with:
        name: war-file
        
    - name: 톰캣1 배포
      run: |
        echo "톰캣1 배포 시작"
        # 실제 배포 로직은 여기에 구현
        # 예: SSH를 통한 원격 배포, Docker 배포 등
        
    - name: 배포 후 헬스체크
      run: |
        echo "배포 후 헬스체크 수행"
        # 실제 헬스체크 로직은 여기에 구현

  # 배포 (톰캣2)
  deploy-tomcat2:
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.environment == 'tomcat2' || (github.ref == 'refs/heads/develop' && github.event_name == 'push')
    environment: production-tomcat2
    steps:
    - name: 빌드 아티팩트 다운로드
      uses: actions/download-artifact@v3
      with:
        name: war-file
        
    - name: 톰캣2 배포
      run: |
        echo "톰캣2 배포 시작"
        # 실제 배포 로직은 여기에 구현
        # 예: SSH를 통한 원격 배포, Docker 배포 등
        
    - name: 배포 후 헬스체크
      run: |
        echo "배포 후 헬스체크 수행"
        # 실제 헬스체크 로직은 여기에 구현

  # 성능 테스트
  performance-tests:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch'
    steps:
    - name: Checkout 코드
      uses: actions/checkout@v3
      
    - name: Java 설정
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: 성능 테스트 실행
      run: |
        mvn test -Dtest=**/*PerformanceTest
        
    - name: 성능 테스트 리포트 생성
      run: |
        mvn jmeter:jmeter

  # 보안 스캔
  security-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout 코드
      uses: actions/checkout@v3
      
    - name: OWASP ZAP 보안 스캔
      uses: zaproxy/action-full-scan@v0.4.0
      with:
        target: 'http://iot.hntsolution.co.kr:8888'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
        
    - name: 보안 스캔 리포트 업로드
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: zap-report.html

  # 알림
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-tomcat1, deploy-tomcat2]
    if: always()
    steps:
    - name: 배포 결과 알림
      run: |
        if [ "${{ needs.deploy-tomcat1.result }}" == "success" ] || [ "${{ needs.deploy-tomcat2.result }}" == "success" ]; then
          echo "배포 성공 알림"
          # 실제 알림 로직은 여기에 구현 (Slack, Discord, Email 등)
        else
          echo "배포 실패 알림"
          # 실제 알림 로직은 여기에 구현
        fi
